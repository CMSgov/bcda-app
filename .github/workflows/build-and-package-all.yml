# Build and Package will build and package BCDA and SSAS APIs onto one platinum AMI 
# and BCDA Worker onto another platinum AMI
name: Build and Package All

on:
  push: # TEMP
    branches: carl/BCDA-8633-build-bcda-on-ami
  workflow_call:
    inputs:
      release_version:
        description: 'Release version (or branch name)'
        required: true
        type: string
      ops_release_version:
        description: 'Release version bcda-ops (or branch name)'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (or branch name)'
        required: true
        type: string
      ops_release_version:
        description: 'Release version for bcda-ops (or branch name)'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  build_and_package_bcda:
    uses: ./.github/workflows/build-and-package-bcda.yml
    with:
      # release_version: ${{ inputs.release_version }}
      release_version: carl/BCDA-8633-build-bcda-on-ami
      # env: ${{ inputs.env }}
      # env: dev
    secrets: inherit

  build_and_package_ssas:
    uses: CMSgov/bcda-ssas-app/.github/workflows/build-and-package.yml@carl/BCDA-8633-build-bcda-on-ami
    with:
      # release_version: ${{ inputs.ops_release_version }}
      release_version: carl/BCDA-8633-build-bcda-on-ami
      # env: ${{ inputs.env }}
      # env: dev
    secrets: inherit

  # TODO: Do we want this?  Or is the ami being built on merge to main enough?
  # build_platinum_ami:
    # uses: ./.github/workflows/build-ami.yml
  
  create_amis:
    runs-on: self-hosted
    needs: [build_and_package_bcda, build_and_package_ssas]
    steps:
      - uses: hashicorp/setup-packer@v2.0.1
      - name: Get AWS params
        uses: cmsgov/ab2d-bcda-dpc-platform/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            GITHUB_TOKEN=/ci/github/token
            SUBNET_ID=/bcda/workflows/packer_subnet_id
      - name: Checkout bcda-ops
        uses: actions/checkout@v4
        with:
          repository: CMSgov/bcda-ops
          # ref: ${{ inputs.ops_release_version }}
          ref: main
          token: ${{ env.GITHUB_TOKEN }}
      - name: Get platinum AMI ID
        run: |
          export BCDA_PLATINUM_AMI=`aws --region us-east-1 ec2 describe-images --filters Name=name,Values='bcda-platinum-??????????????' --query 'sort_by(Images,&CreationDate)[-1]' --output json | jq -r .ImageId`
          echo $BCDA_PLATINUM_AMI
          echo "BCDA_PLATINUM_AMI=$BCDA_PLATINUM_AMI" >> $GITHUB_ENV
      - name: Get release type
        run: |
          if [[ $(git tag -l main | wc -c | xargs) -eq "0" ]]; then
              export RELEASE_TYPE=dev
              
          else
              export RELEASE_TYPE=release
          fi
          echo $RELEASE_TYPE
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
      - name: Install Ansible
        run: |
          sudo yum update -y
          sudo yum install python3-pip -y
          python3 -m pip install ansible==6.5.0
      - name: Create API AMI
        env:
          PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TMPDIR: /home/ec2-user/
        run: |
          echo ${{ env.BCDA_PLATINUM_AMI }}
          echo ${{ env.RELEASE_TYPE }}
          # set -euo pipefail to ensure internal packer/ansible failures get passed to the jenkins pipeline and fails that jobstep
          set -euo pipefail
          # USER=`whoami` PACKER_LOG=1  packer build -var 'source_ami=${{ env.BCDA_PLATINUM_AMI }}' -var 'subnet_id=${{ env.SUBNET_ID }}' -var 'version=${{ inputs.release_version}}' -var 'release_type=${{ env.RELEASE_TYPE }}' packer/api.json 2>&1 | tee api_packer_output.txt
          packer init packer/api.json.pkr.hcl 2>&1
          packer build -color=false -var "source_ami=${{ env.BCDA_PLATINUM_AMI }}" -var "subnet_id=${{ env.SUBNET_ID }}" -var "version=${{ inputs.release_version}}" -var "release_type=${{ env.RELEASE_TYPE }}" packer/api.json.pkr.hcl 2>&1
      - name: Create Worker AMI
        env:
          PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TMPDIR: /home/ec2-user/
        run: |
          echo ${{ env.BCDA_PLATINUM_AMI }}
          echo ${{ env.RELEASE_TYPE }}
          # set -euo pipefail to ensure internal packer/ansible failures get passed to the jenkins pipeline and fails that jobstep
          set -euo pipefail
          # USER=`whoami` packer build -var 'source_ami=${{ env.BCDA_PLATINUM_AMI }}' -var 'subnet_id=${{ env.SUBNET_ID }}' -var 'version=${{ inputs.release_version }}' -var 'release_type=${{ env.RELEASE_TYPE }}' packer/worker.json 2>&1 | tee worker_packer_output.txt
          packer init packer/worker.json.pkr.hcl 2>&1
          packer build -color=false -var "source_ami=${{ env.BCDA_PLATINUM_AMI }}" -var "subnet_id=${{ env.SUBNET_ID }}" -var "version=${{ inputs.release_version}}" -var "release_type=${{ env.RELEASE_TYPE }}" packer/worker.json.pkr.hcl 2>&1
