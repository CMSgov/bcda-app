name: 'BCDA Smoke Tests'

on:
  pull_request:
    paths:
      - .github/workflows/smoke-tests.yml
  workflow_dispatch:
    inputs:
      app-branch:
        description: The branch of the bcda-app to use for the test execution.
        required: true
        type: 'string'
        default: 'main'
      ssas-app-branch:
        description: The branch of the ssas-app to use for the test execution.
        required: true
        type: 'string'
        default: 'main'
      env:
        description: The environment in which to run smoke tests
        required: true
        type: choice
        options:
          - 'dev'
          - 'test'
          - 'opensbx'
          - 'prod'
        default: 'dev'
      test-aco:
        description: Run the tests using the selected ACO
        required: true
        type: choice
        options:
          - 'small'
          - 'medium'
          - 'large'
          - 'extra-large'
          - 'dev'
          - 'paca'
        default: 'dev'
      smoke-tests:
        description: Flag which indicates if smoke integration tests should be run
        required: true
        type: boolean
        default: true
      postman-tests:
        description: Flag which indicates if smoke integration tests should be run
        required: true
        type: boolean
        default: true


concurrency:
  group: ${{ github.workflow }}-${{ inputs.env }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

env:
  COMPOSE_INTERACTIVE_NO_CLI: 1
  VAULT_PW: ${{ secrets.VAULT_PW }}

jobs: 

  smoke_tests: 
    name: run smoke tests
    runs-on: self-hosted
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - name: Modify Credentials For Dev Input
        run: |
          if [[ inputs.test-aco == "dev" ]]; then
            echo "creds=${{ inputs.env }}" >> $GITHUB_OUTPUT
          else 
            echo "creds=$(${{ inputs.test-aco }})" >> $GITHUB_OUTPUT
          fi
      - uses: cmsgov/ab2d-bcda-dpc-platform/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            SSAS_CREDENTIALS=/bcda/workflows/${{ inputs.env }}/ssas_admin_credentials
            ASSERTION_AUD=/bcda/workflows/${{ inputs.env }}/ssas_assertion_aud
            HOST=/bcda/workflows/${{ inputs.env }}/ssas_elb
            CLIENT_CREDENTIALS_PARAMS=/bcda/${{ inputs.env }}/${{ steps.vars.outputs.creds }}_client_credentials
            DENYLIST_CLIENT_CREDENTIALS_PARAMS=/bcda/${{ inputs.env }}/denylisted_client_credentials
            PACA_CLIENT_CREDENTIALS_PARAMS=/bcda/${{ inputs.env }}/paca_client_credentials
      - name: checkout bcda-ssas
        uses: actions/checkout@v4
        with:
          repository: CMSgov/bcda-ssas-app
          ref: 'main'
      - name: Install docker compose manually
        run: |
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.32.4/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chown root:root /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
      - name: Run all tests
        run: |
          docker system prune -af
          CLIENT_ID=$(echo $SSAS_CREDENTIALS | jq -r .client_id)
          CLIENT_SECRET=$(echo $SSAS_CREDENTIALS | jq -r .client_secret)
          docker compose -f docker-compose.test.yml run --rm postman_test test/postman_test/SSAS_Smoke_Test.postman_collection.json -e test/postman_test/aws.postman_environment.json  --global-var adminClientId=$CLIENT_ID --global-var adminClientSecret=$CLIENT_SECRET --global-var ssas_client_assertion_aud=$ASSERTION_AUD --global-var host=$HOST --insecure      
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Ansible
        run: |
          #sudo yum update -y
          sudo yum install python3-pip -y
          python3 -m pip install ansible==6.5.0
      - name: Decrypt secrets
        run: |
          echo $VAULT_PW > .vault_password
          bash ops/secrets --decrypt
          mv -fv shared_files/encrypted/* shared_files/decrypted/
      - name: Build the stack
        run: |
          make docker-bootstrap
      - name: Run Postman Tests
        run: |
          CLIENT_ID=$(echo $CLIENT_CREDENTIALS_PARAMS | jq -r .client_id)
          CLIENT_SECRET=$(echo $CLIENT_CREDENTIALS_PARAMS | jq -r .client_secret)
          docker compose -f docker-compose.test.yml run --rm postman_test test/postman_test/BCDA_Tests_Sequential.postman_collection.json \
           -e test/postman_test/${{ inputs.env }}.postman_environment.json \
           --global-var clientId=${CLIENT_ID} --global-var clientSecret=${CLIENT_SECRET} \
           --global-var v2Disabled=false \
           --global-var blacklistedClientId=${DENYLIST_CLIENT_ID} --global-var blacklistedClientSecret=${DENYLIST_CLIENT_SECRET} \
           --global-var maintenanceMode=""
  
      - name: Run Smoke Tests
        run: |
          CLIENT_ID=$(echo $CLIENT_CREDENTIALS_PARAMS | jq -r .client_id)
          CLIENT_SECRET=$(echo $CLIENT_CREDENTIALS_PARAMS | jq -r .client_secret)
          #make smoke-test env=dev maintenanceMode=""
          docker compose -f docker-compose.test.yml run --rm postman_test test/postman_test/BCDA_Postman_Smoke_Tests.postman_collection.json -e test/postman_test/${{ inputs.env }}.postman_environment.json --global-var clientId=$CLIENT_ID --global-var clientSecret=$CLIENT_SECRET --global-var maintenanceMode=""

      - name: Run PACA Tests
        run: |
          CLIENT_ID=$(echo $PACA_CLIENT_CREDENTIALS_PARAMS | jq -r .client_id)
          CLIENT_SECRET=$(echo $PACA_CLIENT_CREDENTIALS_PARAMS | jq -r .client_secret)
          docker compose -f docker-compose.test.yml run --rm postman_test test/postman_test/BCDA_PAC_Postman_Smoke_Tests.postman_collection.json -e test/postman_test/${{ inputs.env }}.postman_environment.json \
          --global-var clientId=$CLIENT_ID \
          --global-var clientSecret=$CLIENT_SECRET \
  