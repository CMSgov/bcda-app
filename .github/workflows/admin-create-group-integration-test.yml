name: Admin Create Group Integration Tests GF

on:
  pull_request:
    paths:
      - .github/workflows/admin-create-group-integration-test-GF.yml
      - .github/workflows/admin-create-group-deploy-GF.yml
      - bcda/lambda/create_group/**
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

# Ensure we have only one integration test running at a time
concurrency:
  group: create-group-integration-test

env:
  ACO: A5555
  GROUP: A5555-group

jobs:
  # Deploy first if triggered by pull_request
  deploy:
    if: ${{ github.event_name == 'pull_request' }}
    uses: ./.github/workflows/admin-create-group-deploy-GF.yml
    secrets: inherit

  trigger:
    if: ${{ always() }}
    needs: deploy
    runs-on: codebuild-bcda-app-${{github.run_id}}-${{github.run_attempt}}
    defaults:
      run:
        working-directory: ./bcda/lambda/admin_create_group
    outputs:
      start_time: ${{ steps.invoke-lambda.outputs.STARTTIME }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.NON_PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/bcda-dev-github-actions 
      - name: Send event to trigger lambda function
        id: invoke-lambda
        run: |
          echo "STARTTIME=`date +%s`" >> "$GITHUB_OUTPUT"
          aws lambda invoke --function-name bcda-dev-admin-create-group \
            --cli-binary-format raw-in-base64-out \
            --payload '{"group_id":"${{ env.GROUP }}", "group_name":"${{ env.GROUP }}", "aco_id":"${{ env.ACO }}"}' test-result.txt
      - name: Verify result
        run: |
          if grep -q "errorType" test-result.txt; then echo "Failed: check lambda logs."; exit 1; else echo "Success"; fi

  cleanup:
    if: ${{ always() }}
    needs: trigger
    runs-on: codebuild-bcda-app-${{github.run_id}}-${{github.run_attempt}}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{  secrets.NON_PROD_ACCOUNT_ID }}:role/delegatedadmin/developer/bcda-dev-github-actions 
      - name: Install psql
        run: |
          sudo dnf -y update
          sudo dnf install postgresql16 -y
      - name: Get database credentials
        uses: cmsgov/ab2d-bcda-dpc-platform/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            CONNECTION_INFO=/bcda/dev/api/DATABASE_URL
      - name: Remove new group from database
        # CAUTION: if changing the script below, validate that sensitive information is not printed in the workflow
        run: |
          HOST=$(aws rds describe-db-instances --db-instance-identifier bcda-dev 2>&1 | jq -r '.DBInstances[0].Endpoint.Address' 2>&1)
          CONNECTION_URL=$(echo $CONNECTION_INFO 2>&1 | sed -E "s/@.*\/bcda/\@$HOST\/bcda/" 2>&1)
          GROUP_COUNT=`psql -tA "$CONNECTION_URL" -c "SELECT COUNT(*) FROM groups WHERE group_id='${{ env.GROUP }}' AND deleted_at IS NULL" 2>&1`
          if [[ $? -ne 0 || $GROUP_COUNT -ne 1 ]]; then
            echo "number of groups with group_id = ${{ env.GROUP }} not equal to 1"
            echo "matching number of groups: $GROUP_COUNT"
            exit 1
          fi
          UPDATED_COUNT=`psql -tA "$CONNECTION_URL" -c "UPDATE groups SET deleted_at=NOW() WHERE group_id = '${{ env.GROUP }}' AND deleted_at IS NULL" 2>&1`
          if [[ $? -ne 0 || $UPDATED_COUNT != "UPDATE 1" ]]; then
            echo "group deletion command failed"
            echo "deletion command results: $UPDATED_COUNT"
            exit 1
          fi
