name: Migrate DB

on:
  workflow_call:
    inputs:
      release_version:
        description: 'Release version (or branch name)'
        required: true
        type: string
      env:
        description: 'Environment you want to migrate for (dev, test, sandbox, prod)'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (or branch name)'
        required: true
        type: string
      env:
        description: 'Environment you want to migrate for (dev, test, sandbox, prod)'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - test
          - sandbox
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  migrate_db:
    environment: ${{ inputs.env || 'dev' }}
    name: Migrate DB
    runs-on: codebuild-bcda-app-${{github.run_id}}-${{github.run_attempt}}
    steps:
      - name: Checkout BCDA
        uses: actions/checkout@v4
        with:
          repository: CMSgov/bcda-app
          ref: ${{ inputs.release_version }}
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/delegatedadmin/developer/${{ vars.AWS_ROLE_TO_ASSUME }}
      - name: Get AWS params
        uses: cmsgov/cdap/actions/aws-params-env-action@main
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        with:
          params: |
            DB_URL=/bcda/${{ inputs.env }}/api/DATABASE_URL
      - name: Get Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Get golang-migrate
        run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      - name: Migrate DB
        env:
          PGSSLMODE: require
        # CAUTION: if changing the script below, validate that sensitive information is not printed in the workflow
        run: |
          HOST=$(aws rds describe-db-instances --db-instance-identifier bcda-${{ inputs.env }}-aurora-0 2>&1 | jq -r '.DBInstances[0].Endpoint.Address' 2>&1)
          CONNECTION_URL=$(echo $DB_URL 2>&1 | sed -E "s/@.*\/bcda/\@$HOST\/bcda/" 2>&1)
          migrate -database ${CONNECTION_URL} -path db/migrations/bcda up
      - name: Success Alert
        if: ${{ success() }}
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to bcda-deploy
          payload: |
            channel: "C03S23MJFJS"
            attachments:
              - color: good
                text: "SUCCESS: DB Migrations in ${{ inputs.env }} (run: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>)."
                mrkdown_in:
                  - text
      - name: Failure Alert
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          # Sends to bcda-alerts
          payload: |
            channel: "C034CFU945C"
            attachments:
              - color: danger
                text: "FAILURE: DB Migrations in ${{ inputs.env }} (run: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>)."
                mrkdown_in:
                  - text
