{
	"info": {
		"_postman_id": "985c4662-8cb5-4920-8ba7-6f91bc74a6a4",
		"name": "SSAS Smoke Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "admin info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b601d0c1-40e0-4b4a-a257-1095497e7cf8",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"banner\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
							"        \"routes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains path of an endpoint\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"/_info\");",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/_info",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "admin health",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39f25f26-ea63-48a5-9bca-c9b8d2dd5f4d",
						"exec": [
							"var schema = {",
							"  \"$id\": \"https://bcda.cms.gov/schemas/health.json\",",
							"  \"database\": { \"type\": \"string\" }",
							"};",
							"",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains 'ok'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ok\");",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/_health",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"_health"
					]
				}
			},
			"response": []
		},
		{
			"name": "admin _version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "478577ae-564e-4264-92d0-1aa90421cfd7",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"version\": { \"type\": \"string\" },",
							"    },",
							"    \"additionalProperties\": false",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Enable when actual version returned",
							"//",
							"// pm.test(\"Response is JSON\", function () {",
							"    // pm.response.to.have.jsonBody(\"version\")",
							"// });",
							"",
							"//pm.test('Schema is valid', function() {",
							"//    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"//});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/_version",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"_version"
					]
				}
			},
			"response": []
		},
		{
			"name": "public info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0cf6a0b-e506-4d55-88ef-72678806fd9c",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"banner\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
							"        \"routes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains path of an endpoint\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"/_info\");",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/_info",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "public health",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ffd17434-9290-4cb2-b1b0-c1ae84f65d0a",
						"exec": [
							"var schema = {",
							"  \"$id\": \"https://bcda.cms.gov/schemas/health.json\",",
							"  \"database\": { \"type\": \"string\" }",
							"};",
							"",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains 'ok'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"ok\");",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/_health",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"_health"
					]
				}
			},
			"response": []
		},
		{
			"name": "public _version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34204d21-bf63-4a3f-a496-19bc2557fce9",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"version\": { \"type\": \"string\" },",
							"    },",
							"    \"additionalProperties\": false",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Enable when actual version returned",
							"//",
							"// pm.test(\"Response is JSON\", function () {",
							"    // pm.response.to.have.jsonBody(\"version\")",
							"// });",
							"",
							"//pm.test('Schema is valid', function() {",
							"//    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"//});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/_version",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"_version"
					]
				}
			},
			"response": []
		},
		{
			"name": "create group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20ed753f-bd64-4270-9993-305d4efc1372",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"ID\": { \"type\": \"integer\" },",
							"        \"group_id\": { \"type\": \"string\" },",
							"        \"data\": { ",
							"            \"properties\": {",
							"                \"id\": { \"type\": \"string\" },",
							"                \"name\": { \"type\": \"string\" },",
							"                \"users\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
							"                \"scopes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
							"                \"resources\": { ",
							"                    \"type\": \"array\", \"items\": { ",
							"                        \"properties\": {",
							"                            \"id\": { \"type\": \"string\" },",
							"                            \"name\": { \"type\": \"string\" },",
							"                            \"scopes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }",
							"                        }",
							"                    }",
							"                },",
							"                \"system\": {",
							"                    \"type\": \"array\", \"items\": {",
							"                        \"properties\": {",
							"                            \"client_id\": { \"type\": \"string\" },",
							"                            \"software_id\": { \"type\": \"string\" },",
							"                            \"client_name\": { \"type\": \"string\" }",
							"                        }",
							"                    }",
							"                }",
							"            }",
							"        }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'created'\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Group.group_id has expected value\", function () {",
							"    pm.response.to.have.jsonBody(\"group_id\", pm.environment.get(\"group.group_id\"))",
							"});",
							"",
							"pm.test(\"Group.data is JSON\", function () {",
							"    pm.response.to.have.jsonBody(\"data\")",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"var respJson = pm.response.json();",
							"pm.environment.set(\"group.id\", respJson.ID);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e6d558fb-7002-437a-b2cf-1bdcff29d62d",
						"exec": [
							"const uuid = require('uuid')",
							"pm.environment.set(\"group.group_id\", uuid());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"group_id\": \"{{group.group_id}}\",\n  \"name\": \"Smoke Test Group\",\n  \"xdata\": \"{\\\"cms_ids\\\":[\\\"A9994\\\"]}\",\n  \"resources\": [\n    {\n      \"id\": \"bcda\",\n      \"name\": \"BCDA API\",\n      \"scopes\": [\n        \"bcda-api\"\n      ]\n    }\n  ]\n}"
				},
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/group",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"group"
					]
				}
			},
			"response": []
		},
		{
			"name": "update group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dffcb16-25eb-44bc-8be3-fe19b23dc302",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"ID\": { \"type\": \"integer\" },",
							"        \"group_id\": { \"type\": \"string\" },",
							"        \"data\": { ",
							"            \"properties\": {",
							"                \"id\": { \"type\": \"string\" },",
							"                \"name\": { \"type\": \"string\" },",
							"                \"users\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
							"                \"scopes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
							"                \"resources\": { ",
							"                    \"type\": \"array\", \"items\": { ",
							"                        \"properties\": {",
							"                            \"id\": { \"type\": \"string\" },",
							"                            \"name\": { \"type\": \"string\" },",
							"                            \"scopes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }",
							"                        }",
							"                    }",
							"                },",
							"                \"system\": {",
							"                    \"type\": \"array\", \"items\": {",
							"                        \"properties\": {",
							"                            \"client_id\": { \"type\": \"string\" },",
							"                            \"software_id\": { \"type\": \"string\" },",
							"                            \"client_name\": { \"type\": \"string\" }",
							"                        }",
							"                    }",
							"                }",
							"            }",
							"        }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Group.group_id has original value\", function () {",
							"    pm.response.to.have.jsonBody(\"group_id\", pm.environment.get(\"group.group_id\"))",
							"});",
							"",
							"pm.test(\"Group.data is JSON\", function () {",
							"    pm.response.to.have.jsonBody(\"data\")",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"var respObj = JSON.parse(pm.response.text());",
							"pm.test(\"Scope is changed\", function() {",
							"    pm.expect(respObj.data.resources[0].scopes[0]).to.eql(\"new_scope\");",
							"});",
							"",
							"pm.test(\"Group name has original value\", function() {",
							"    pm.expect(respObj.data.name).to.eql(\"Smoke Test Group\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"this_id_is_ignored_and_should_be_omitted\",\n  \"name\": \"this_name_is_ignored_and_should_be_omitted\",\n  \"resources\": [\n    {\n      \"id\": \"bcda\",\n      \"name\": \"BCDA API\",\n      \"scopes\": [\n        \"new_scope\"\n      ]\n    }\n  ]\n}"
				},
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/group/{{group.id}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"group",
						"{{group.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "list group (present)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f4740e30-67e2-4ec7-bfae-9d44f7aa84fc",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"ID\": { \"type\": \"integer\" },",
							"        \"group_id\": { \"type\": \"string\" },",
							"        \"data\": { ",
							"            \"properties\": {",
							"                \"id\": { \"type\": \"string\" },",
							"                \"name\": { \"type\": \"string\" },",
							"                \"users\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
							"                \"scopes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },",
							"                \"resources\": { ",
							"                    \"type\": \"array\", \"items\": { ",
							"                        \"properties\": {",
							"                            \"id\": { \"type\": \"string\" },",
							"                            \"name\": { \"type\": \"string\" },                                ",
							"                            \"scopes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }",
							"                        }",
							"                    }",
							"                },",
							"                \"system\": {",
							"                    \"type\": \"array\", \"items\": {",
							"                        \"properties\": {",
							"                            \"client_id\": { \"type\": \"string\" },                                \"software_id\": { \"type\": \"string\" },",
							"                                \"client_name\": { \"type\": \"string\" }",
							"                        }",
							"                    }",
							"                }",
							"            }",
							"        }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"pm.test(\"Response includes Group.group_id\", function() {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"group.group_id\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/group",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"group"
					]
				}
			},
			"response": []
		},
		{
			"name": "create system",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20ed753f-bd64-4270-9993-305d4efc1372",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"client_id\": { \"type\": \"string\" },",
							"        \"client_secret\": { \"type\": \"string\" },",
							"        \"client_name\": { \"type\": \"string\" },",
							"        \"system_id\": { \"type\": \"string\" },",
							"        \"expires_at\": { \"type\": \"string\", \"format\": \"time\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'created'\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"client_name has expected value\", function () {",
							"    pm.response.to.have.jsonBody(\"client_name\", \"System for group \" + pm.environment.get(\"group.group_id\"))",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"var respJson = pm.response.json();",
							"pm.environment.set(\"client_id\", respJson.client_id);",
							"pm.environment.set(\"client_secret\", respJson.client_secret);",
							"pm.environment.set(\"system_id\", respJson.system_id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6d53fcea-1dfa-4739-b2af-64eca365b31e",
						"exec": [
							"const uuid = require('uuid')",
							"pm.environment.set(\"tracking_id\", uuid());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"client_name\": \"System for group {{group.group_id}}\",\n    \"group_id\": \"{{group.group_id}}\",\n    \"scope\": \"bcda-api\",\n    \"public_key\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArhxobShmNifzW3xznB+L\\nI8+hgaePpSGIFCtFz2IXGU6EMLdeufhADaGPLft9xjwdN1ts276iXQiaChKPA2CK\\n/CBpuKcnU3LhU8JEi7u/db7J4lJlh6evjdKVKlMuhPcljnIKAiGcWln3zwYrFCeL\\ncN0aTOt4xnQpm8OqHawJ18y0WhsWT+hf1DeBDWvdfRuAPlfuVtl3KkrNYn1yqCgQ\\nlT6v/WyzptJhSR1jxdR7XLOhDGTZUzlHXh2bM7sav2n1+sLsuCkzTJqWZ8K7k7cI\\nXK354CNpCdyRYUAUvr4rORIAUmcIFjaR3J4y/Dh2JIyDToOHg7vjpCtNnNoS+ON2\\nHwIDAQAB\\n-----END PUBLIC KEY-----\",\n    \"tracking_id\": \"{{tracking_id}}\"\n}"
				},
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/system",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"system"
					]
				}
			},
			"response": []
		},
		{
			"name": "get system public key",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20ed753f-bd64-4270-9993-305d4efc1372",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"client_id\": { \"type\": \"string\" },",
							"        \"public_key\": { \"type\": \"string\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"pm.test(\"client_id has expected value\", function () {",
							"    pm.response.to.have.jsonBody(\"client_id\", pm.environment.get(\"client_id\"))",
							"});",
							"",
							"pm.test(\"public_key has expected value\", function () {",
							"    pm.response.to.have.jsonBody(\"public_key\", \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArhxobShmNifzW3xznB+L\\nI8+hgaePpSGIFCtFz2IXGU6EMLdeufhADaGPLft9xjwdN1ts276iXQiaChKPA2CK\\n/CBpuKcnU3LhU8JEi7u/db7J4lJlh6evjdKVKlMuhPcljnIKAiGcWln3zwYrFCeL\\ncN0aTOt4xnQpm8OqHawJ18y0WhsWT+hf1DeBDWvdfRuAPlfuVtl3KkrNYn1yqCgQ\\nlT6v/WyzptJhSR1jxdR7XLOhDGTZUzlHXh2bM7sav2n1+sLsuCkzTJqWZ8K7k7cI\\nXK354CNpCdyRYUAUvr4rORIAUmcIFjaR3J4y/Dh2JIyDToOHg7vjpCtNnNoS+ON2\\nHwIDAQAB\\n-----END PUBLIC KEY-----\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/system/{{system_id}}/key",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"system",
						"{{system_id}}",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "get system token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76825199-0e23-4120-a0a8-c83b67899915",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"access_token\": { \"type\": \"string\" },",
							"        \"token_type\": { \"type\": \"string\" },",
							"        \"expires_in\": { \"type\": \"string\", \"format\": \"time\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'created'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"token_type has expected value\", function () {",
							"    pm.response.to.have.jsonBody(\"token_type\", \"bearer\")",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"var respJson = pm.response.json();",
							"pm.environment.set(\"token\", respJson.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{client_secret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{client_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"token"
					]
				},
				"description": "Verify a username and password"
			},
			"response": []
		},
		{
			"name": "token active",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "518dc44c-5f13-4d12-8239-037420892f5f",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"active\": { \"type\": \"string\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"pm.test(\"Token is active\", function () {",
							"    pm.response.to.have.jsonBody(\"active\", true)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{adminClientId}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{adminClientSecret}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"token\":\"{{token}}\"}"
				},
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/introspect",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"introspect"
					]
				}
			},
			"response": []
		},
		{
			"name": "revoke token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "95ce3470-8202-4e9f-b4f6-4fe36a09cb0d",
						"exec": [
							"pm.test(\"Response is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2e3ad198-59dc-4ceb-8f05-0045b7e38c98",
						"exec": [
							"var parts = pm.environment.get(\"token\").split('.'); // header, payload, signature",
							"var t = JSON.parse(atob(parts[1]));",
							"",
							"",
							"pm.test(\"Can parse token ID\", function () {",
							"    pm.expect(t.jti).to.not.eql(\"\");",
							"});",
							"",
							"",
							"pm.environment.set(\"token_id\", t.jti)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/token/{{token_id}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"token",
						"{{token_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "token inactive",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "518dc44c-5f13-4d12-8239-037420892f5f",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"active\": { \"type\": \"string\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"pm.test(\"Token is not active\", function () {",
							"    pm.response.to.have.jsonBody(\"active\", false)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{adminClientId}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{adminClientSecret}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"token\":\"{{token}}\"}"
				},
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/introspect",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"introspect"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset system credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20ed753f-bd64-4270-9993-305d4efc1372",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"client_id\": { \"type\": \"string\" },",
							"        \"secret\": { \"type\": \"string\" },",
							"        \"expires_in\": { \"type\": \"string\", \"format\": \"time\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'created'\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"// uncomment when client_id bug is fixed",
							"//pm.test(\"client_id has expected value\", function () {",
							"//    pm.response.to.have.jsonBody(\"client_id\", pm.environment.get(\"client_id\"))",
							"//});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"client_secret is not blank\", function () {",
							"    pm.expect(respJson.client_secret).to.not.eql(\"\");",
							"});",
							"",
							"// uncomment when client_id bug is fixed ",
							"//pm.environment.set(\"client_id\", respJson.client_id);  ",
							"pm.environment.set(\"client_secret\", respJson.client_secret);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/system/{{system_id}}/credentials",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"system",
						"{{system_id}}",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "get system token (new credentials)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76825199-0e23-4120-a0a8-c83b67899915",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"access_token\": { \"type\": \"string\" },",
							"        \"token_type\": { \"type\": \"string\" },",
							"        \"expires_in\": { \"type\": \"string\", \"format\": \"time\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'created'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"token_type has expected value\", function () {",
							"    pm.response.to.have.jsonBody(\"token_type\", \"bearer\")",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"var respJson = pm.response.json();",
							"pm.environment.set(\"token\", respJson.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{client_secret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{client_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"token"
					]
				},
				"description": "Verify a username and password"
			},
			"response": []
		},
		{
			"name": "revoke system credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20ed753f-bd64-4270-9993-305d4efc1372",
						"exec": [
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/system/{{system_id}}/credentials",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"system",
						"{{system_id}}",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "get system token denied",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76825199-0e23-4120-a0a8-c83b67899915",
						"exec": [
							"var schema = {",
							"    \"properties\": {",
							"        \"error\": { \"type\": \"string\" },",
							"        \"error_description\": { \"type\": \"string\" }",
							"    }",
							"};",
							"var Ajv = require('ajv');",
							"var ajv = new Ajv({schemas: [schema]});",
							"",
							"pm.test(\"Response is 'bad request'\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"    pm.expect(ajv.validate(schema, pm.response.text())).to.be.true;",
							"});",
							"",
							"pm.test(\"Error has expected value\", function () {",
							"    pm.response.to.have.jsonBody(\"error\", \"Unauthorized\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{client_secret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{client_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{public-port}}/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{public-port}}",
					"path": [
						"token"
					]
				},
				"description": "Verify a username and password"
			},
			"response": []
		},
		{
			"name": "delete group and system",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "95ce3470-8202-4e9f-b4f6-4fe36a09cb0d",
						"exec": [
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/group/{{group.id}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"group",
						"{{group.id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "list group (not present)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc625fc2-e25e-4fd2-a110-fc1528839ca7",
						"exec": [
							"pm.test(\"Response is 'ok'\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response does not include Group.group_id\", function() {",
							"    pm.expect(pm.response.text()).to.not.include(pm.environment.get(\"group.group_id\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}:{{admin-port}}/group",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"port": "{{admin-port}}",
					"path": [
						"group"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "70fab265-98e0-4061-9553-ff8d6d75ac9e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4019121e-102f-45b0-bf5b-e1bf6a9c6595",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}