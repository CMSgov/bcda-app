{
	"info": {
		"_postman_id": "c262bae4-4b78-4efa-a98d-ae2097916b2d",
		"name": "Beneficiary Claims Data API Tests, Sequential",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e1aca00f-2d0d-4a40-af84-ddca0a3d4ea8",
						"exec": [
							"pm.test(\"Response contains version\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"version\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/_version",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"_version"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7ad153eb-6b5d-41fe-9067-849d0e868400",
						"exec": [
							"pm.test(\"Response time is less than 200 ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is CapabilityStatement\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"CapabilityStatement\")",
							"});",
							"",
							"const schema = {",
							"    \"properties\": {",
							"        \"resourceType\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"date\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"publisher\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"kind\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"instantiates\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"software\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"name\": {},",
							"                \"version\": {},",
							"                \"releaseDate\": {}",
							"            }",
							"        },",
							"        \"implementation\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"fhirVersion\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"acceptUnknown\":{",
							"            \"type\": \"string\"",
							"        },",
							"        \"format\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"rest\": {",
							"            \"type\": \"array\"",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Schema is valid\", function() {",
							"    pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/metadata",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"metadata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d9ce781-4e5e-4042-91ac-ea1c4bb1e92e",
						"exec": [
							"pm.test(\"Response contains database status\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"database\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/_health",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"_health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b2b406db-fd6f-4144-b49a-fcd1271ef6a1",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57d9f83d-6bac-4daa-bd44-6fd41eb9b129",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "748a2b4d-e4e4-4a92-b980-ada55f1ea4f6",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get job status, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0428f43c-69ca-409c-a722-ed0f19b1f3b3",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/jobs/{{jobId}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{jobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35274aca-3bad-46fd-9efd-cbdc598746c3",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/data/{{jobId}}/{{acoId}}.ndjson",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"data",
						"{{jobId}}",
						"{{acoId}}.ndjson"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2b6295dc-c9ab-4646-b1ee-4997f6d635a2",
						"exec": [
							"var env = pm.environment.get(\"env\");",
							"pm.environment.set(\"clientId\", pm.globals.get(\"clientId\"));",
							"pm.environment.set(\"clientSecret\", pm.globals.get(\"clientSecret\"));",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON;",
							"try {",
							"   responseJSON = JSON.parse(responseBody);",
							"   tests['response is valid JSON'] = true;",
							"}",
							"catch (e) {",
							"   responseJSON = {};",
							"   tests['response is valid JSON'] = false;",
							"}",
							"",
							"pm.environment.set(\"token\", responseJSON.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{clientSecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{clientId}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{scheme}}://{{host}}/auth/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d8e7bac-f8ca-4445-b52c-0eee58dd857d",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "097845d4-c463-4716-9e22-114662cbd7b0",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"coverageJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b5dfe937-cdb2-4a09-a955-24b4700e99d2",
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type Coverage.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0c88838-95b1-4043-aa51-b0fa92ab2431",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"eobJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22648c0a-3b2f-4a09-943e-8fbd9db98e48",
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start all type export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3bc9a5c-dc75-41b1-a745-6c7eb15de213",
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02fe915e-0f66-4abd-8099-82db59c3b4d0",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"patientDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a8e3ff19-f1a8-430d-ab53-10c59ab39ded",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientJobUrl}}",
					"host": [
						"{{patientJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62021b11-873b-4791-998f-cebde558021a",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patientDataUrl}}",
					"host": [
						"{{patientDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b64355a-2667-42a2-8ae9-b7ad6020356f",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"   pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"coverageDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2af45c38-0689-4788-a349-ed695135042e",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var coverageJobReq = {",
							"  url: pm.environment.get(\"coverageJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(coverageJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Coverage export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Coverage job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Coverage export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Coverage export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{coverageJobUrl}}",
					"host": [
						"{{coverageJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "440a1c9c-ad96-4b3c-b802-2872e91a6c01",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{coverageDataUrl}}",
					"host": [
						"{{coverageDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e04f3bc9-11a0-42eb-a17b-611466acd735",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"eobDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b689a189-aec0-4462-92be-ff047f80a433",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"eobJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ExplanationOfBenefit export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for ExplanationOfBenefit job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"EOB export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from EOB export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{eobJobUrl}}",
					"host": [
						"{{eobJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f580e70-1b1c-4931-8192-a93b5eedc805",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{eobDataUrl}}",
					"host": [
						"{{eobDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export Valid Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c77637dc-0920-4e9a-84e3-c5c4bfd30f90",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientValidSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5ac0f0b0-299c-47e5-9676-6b72c60670a5",
						"exec": [
							"let timestamp = new Date().toJSON();",
							"pm.environment.set('now', timestamp);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient&_since={{now}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "{{now}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export Valid Since job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dfa1e243-587c-4d04-b235-a3932513c363",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"patientValidSinceDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7c2e87c1-ab3b-4ae9-9dea-453908426c1e",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientValidSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientValidSinceJobUrl}}",
					"host": [
						"{{patientValidSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export data Valid Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7fd1fe61-3ab1-43be-afca-ac9950499633",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body does not contain data\", function() {",
							"    pm.expect(pm.response.length === 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patientValidSinceDataUrl}}",
					"host": [
						"{{patientValidSinceDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export without Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac1cc9db-8da7-470b-b8c1-f7099e80cba9",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllNoSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all without Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "faaaa1fd-a74c-41b9-9659-2416692eec7a",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllNoSinceJobUrl\", respJson.output[0].url);",
							"",
							"",
							"    pm.test(\"One file in output\", function() {",
							"      pm.expect(respJson.output.length).to.eql(1)",
							"    });",
							"",
							"    pm.test(\"File is of type Patient\", function() {",
							"     pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3336b61c-c969-463f-93c3-66813ed19ec3",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllNoSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllNoSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllNoSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (without _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (without _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (without _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (without _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllNoSinceJobUrl}}",
					"host": [
						"{{groupAllNoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all without Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84145c1b-02f4-4bc8-a34a-b0378944c993",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllNoSinceJobUrl}}",
					"host": [
						"{{groupAllNoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export with Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e76f26f4-a642-4aba-84dd-4dd90409e0c2",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient&_since=2020-02-13T08:00:00.000-05:00",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "2020-02-13T08:00:00.000-05:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all with Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "754e8d35-8e6e-4196-86f4-d7366bfef12d",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllSinceJobUrl\", respJson.output[0].url);",
							"",
							"    pm.test(\"Two files in output\", function() {",
							"        pm.expect(respJson.output.length).to.eql(2)",
							"    });",
							"",
							"    pm.test(\"File 1 is of type Patient\", function() {",
							"      pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"    ",
							"    pm.test(\"File 2 is of type Patient\", function() {",
							"        pm.expect(respJson.output[1].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c0a6ae41-0eac-4990-8c25-34c882f14a14",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (with _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (with _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (with _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (with _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllSinceJobUrl}}",
					"host": [
						"{{groupAllSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all with Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e6c36a7c-7621-4203-9e4e-38dd4664a414",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllSinceJobUrl}}",
					"host": [
						"{{groupAllSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start repeated type for /Patient EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "648630b5-52ad-42de-abca-b5c70d4957bc",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Repeated Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Repeated resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit,ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit,ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export Invalid Since Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "64f5f622-4144-4c1d-b508-cd1219098566",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details text is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid date format supplied in _since parameter.  Date must be in FHIR Instant format.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient&_since=123invalid",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "123invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export Invalid Since Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d581eaca-c9ae-4ad0-bb62-63364cec9427",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details text is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid date format supplied in _since parameter.  Date must be in FHIR Instant format.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient&_since=123invalid",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "123invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start /Patient non-existing resource type export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b487259-16fa-47b8-a25f-dc1350f39aa4",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Practitioner",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Practitioner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start /Group non-existing resource type export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02f37336-3d70-44b1-a998-753656562f07",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Practitioner",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Practitioner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start repeated type for /Group EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cecbc3d2-ad08-4b7f-b12b-0a8d22c7e9cc",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Repeated Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Repeated resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=ExplanationOfBenefit,ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit,ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export, invalid group id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c48040ca-ba40-4714-8603-ea880115df38",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid group ID\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/sub/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"sub",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export, invalid _elements param",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb59346a-1194-49dd-9335-8c920658d611",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid parameter: this server does not support the _elements parameter.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_elements=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_elements",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export, invalid _elements param",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cf9ee19-c0bc-4aa7-a7f9-3324f751c167",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid parameter: this server does not support the _elements parameter.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_elements=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_elements",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}