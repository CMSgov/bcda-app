{
	"info": {
		"_postman_id": "73296b54-ffa2-4a39-ba09-f179cd6023be",
		"name": "Beneficiary Claims Data API Tests, Sequential",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6df0f695-de66-4edc-92ba-9ed002e61e0c",
						"exec": [
							"pm.test(\"Response contains version\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"version\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/_version",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"_version"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a5de4d9-3cf2-4597-9189-8ee05da0bec5",
						"exec": [
							"pm.test(\"Response time is less than 200 ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is CapabilityStatement\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"CapabilityStatement\")",
							"});",
							"",
							"const schema = {",
							"    \"properties\": {",
							"        \"resourceType\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"date\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"publisher\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"kind\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"instantiates\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"software\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"name\": {},",
							"                \"version\": {},",
							"                \"releaseDate\": {}",
							"            }",
							"        },",
							"        \"implementation\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"fhirVersion\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"acceptUnknown\":{",
							"            \"type\": \"string\"",
							"        },",
							"        \"format\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"rest\": {",
							"            \"type\": \"array\"",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Schema is valid\", function() {",
							"    pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/metadata",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"metadata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d9433b1-d321-40d3-8f9e-14b52a1943d0",
						"exec": [
							"pm.test(\"Response contains database status\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"database\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/_health",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"_health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swagger V1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "386f472b-b6da-4d10-834a-8da0c2a51039",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is text/html; charset=utf-8\", function() {",
							"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/swagger/",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"swagger",
						""
					]
				},
				"description": "TODO (BCDA-4109) - Remove test verifying v1 specific artifacts"
			},
			"response": []
		},
		{
			"name": "Swagger V1 + V2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2fa6db1-d1da-402d-9566-b60cdb7a0fc3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is text/html; charset=utf-8\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/swagger/",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"swagger",
						""
					]
				},
				"description": "Make request to location that should contain v1 and v2 API requests"
			},
			"response": []
		},
		{
			"name": "Start EOB export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e131171d-b825-41b9-a5c3-45055c225979",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46ca68f2-9dc6-472d-b42c-ca56a23ff810",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e305944e-ee09-4c3e-91b8-b195d3e2ccb0",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get job status, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "815b19b4-3e0f-4a86-b520-8c41b7c58ee2",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/jobs/{{jobId}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{jobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9a1bba1-4dae-4e28-88f4-248a319038e6",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/data/{{jobId}}/{{acoId}}.ndjson",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"data",
						"{{jobId}}",
						"{{acoId}}.ndjson"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e9e51991-6a34-4696-8c02-a74f9003b17a",
						"exec": [
							"var env = pm.environment.get(\"env\");",
							"pm.environment.set(\"clientId\", pm.globals.get(\"clientId\"));",
							"pm.environment.set(\"clientSecret\", pm.globals.get(\"clientSecret\"));",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON;",
							"try {",
							"   responseJSON = JSON.parse(responseBody);",
							"   tests['response is valid JSON'] = true;",
							"}",
							"catch (e) {",
							"   responseJSON = {};",
							"   tests['response is valid JSON'] = false;",
							"}",
							"",
							"pm.environment.set(\"token\", responseJSON.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{clientSecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{clientId}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{scheme}}://{{host}}/auth/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e55b5b00-26f7-43fe-9e09-cf23aa796ec1",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f1715df9-3859-4020-a5b6-ff63fefc29ff",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"coverageJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "91309eef-b1f7-4f59-867d-581ca52ed814",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"eobJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7156495-cdb0-449c-91ef-6624cdb573c5",
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start all type export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f05e5590-b721-4bed-a65f-016b8a2ce7e3",
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f749a40-3324-43db-9f16-4fd601aa4dea",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"patientDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "72180619-19e9-44cb-abb5-9475fa1d5e97",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientJobUrl}}",
					"host": [
						"{{patientJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5f59224-d9e5-442b-a9bb-31e1ea2ea1a4",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patientDataUrl}}",
					"host": [
						"{{patientDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f96538e7-4076-46ca-8da7-43d746c7ce0e",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"   pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"coverageDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ac857e0b-d1a3-4300-893f-ccce2c4df96f",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var coverageJobReq = {",
							"  url: pm.environment.get(\"coverageJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(coverageJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Coverage export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Coverage job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Coverage export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Coverage export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{coverageJobUrl}}",
					"host": [
						"{{coverageJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "868aa5a9-ab65-4494-9cac-9eee143c40aa",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{coverageDataUrl}}",
					"host": [
						"{{coverageDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2b427540-a8ba-4f7a-b8f1-a2e38528e202",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"eobDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "514c03f0-6faf-4fae-a5a7-c3323165cef0",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"eobJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ExplanationOfBenefit export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for ExplanationOfBenefit job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"EOB export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from EOB export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{eobJobUrl}}",
					"host": [
						"{{eobJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0177ff46-75c3-44a1-a462-fe595ad18eec",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{eobDataUrl}}",
					"host": [
						"{{eobDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export Valid Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b53ff34-80dd-4fa1-a1cb-163f5b992d3a",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientValidSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "fe599b4a-411c-44ba-8692-3b67ef29a205",
						"exec": [
							"let timestamp = new Date().toJSON();",
							"pm.environment.set('now', timestamp);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient&_since={{now}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "{{now}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export Valid Since job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c719f3d5-eb24-4750-b8e5-fe479d49a57f",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"patientValidSinceDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e6f3137c-1d4b-43d2-9429-05b287f79599",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientValidSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientValidSinceJobUrl}}",
					"host": [
						"{{patientValidSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export data Valid Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78843c4c-4882-44d1-bedf-f9e4b1d7b337",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body does not contain data\", function() {",
							"    pm.expect(pm.response.length === 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patientValidSinceDataUrl}}",
					"host": [
						"{{patientValidSinceDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export without Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c6b7935-eb41-41a1-bdbb-9af69f3c310a",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllNoSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all without Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "27520711-9a56-430d-b8ba-15f03d12b0ca",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllNoSinceJobUrl\", respJson.output[0].url);",
							"",
							"",
							"    pm.test(\"One file in output\", function() {",
							"      pm.expect(respJson.output.length).to.eql(1)",
							"    });",
							"",
							"    pm.test(\"File is of type Patient\", function() {",
							"     pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3db42fad-8cfc-483c-943f-c0a96dbb5705",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllNoSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllNoSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllNoSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (without _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (without _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (without _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (without _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllNoSinceJobUrl}}",
					"host": [
						"{{groupAllNoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all without Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "18427c61-a3f4-4dd9-b2c0-882f66446b17",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllNoSinceJobUrl}}",
					"host": [
						"{{groupAllNoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export with Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "efc7fbca-17d9-4444-9f16-ce77eb86a167",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient&_since=2020-02-13T08:00:00.000-05:00",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "2020-02-13T08:00:00.000-05:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/runout export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbcf7e9a-cd41-4c7a-8f3e-a1e531b02854",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupRunoutJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/runout/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"runout",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all with Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e5af0aa-1cc5-4929-8080-18cdfd29ea84",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllSinceJobUrl\", respJson.output[0].url);",
							"",
							"    pm.test(\"Two files in output\", function() {",
							"        pm.expect(respJson.output.length).to.eql(2)",
							"    });",
							"",
							"    pm.test(\"File 1 is of type Patient\", function() {",
							"      pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"    ",
							"    pm.test(\"File 2 is of type Patient\", function() {",
							"        pm.expect(respJson.output[1].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6d1ddcb1-eaf5-4a2c-bcd9-a5dc16e6e70b",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (with _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (with _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (with _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (with _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllSinceJobUrl}}",
					"host": [
						"{{groupAllSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all with Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f5269a1-6b83-4d80-87cd-66726609736f",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllSinceJobUrl}}",
					"host": [
						"{{groupAllSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/runout job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2f98d8e-ced7-464d-9e80-99e9589c3adb",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupRunoutDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6159dce9-7072-4eef-84b3-4b4eaa542de4",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"groupRunoutJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ExplanationOfBenefit export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.error(\"Retry limit reached for ExplanationOfBenefit job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"EOB export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from EOB export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupRunoutJobUrl}}",
					"host": [
						"{{groupRunoutJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/runout job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "daab6110-8f2e-4689-8dfa-f976eaf85041",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupRunoutDataUrl}}",
					"host": [
						"{{groupRunoutDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start repeated type for /Patient EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a5efa5b-03c1-45a9-9971-95f6b8d47b0c",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Repeated Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Repeated resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit,ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit,ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export Invalid Since Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "746f9364-978e-4915-81de-281e7c5c97bc",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details text is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid date format supplied in _since parameter.  Date must be in FHIR Instant format.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient&_since=123invalid",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "123invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export Invalid Since Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b70cf86-2ff5-4561-a127-8add165966d2",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details text is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid date format supplied in _since parameter.  Date must be in FHIR Instant format.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient&_since=123invalid",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "123invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start /Patient non-existing resource type export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e203348-47fd-433f-87c8-8258181cb4ea",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Practitioner",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Practitioner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start /Group non-existing resource type export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d712debc-4e9f-47c3-b3f5-33aab2033c80",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Practitioner",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Practitioner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start repeated type for /Group EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f648a749-6f36-4ed2-a142-6002a21dc289",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Repeated Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Repeated resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=ExplanationOfBenefit,ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit,ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export, invalid group id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b162e45a-0ba7-45c9-b1c7-1b47cb629c10",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid group ID\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/sub/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"sub",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export, invalid _elements param",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5d99776-dd0d-4322-9700-355fd0820bd6",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid parameter: this server does not support the _elements parameter.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_elements=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_elements",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export, invalid _elements param",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "079abacd-75b1-4bb4-b233-9615448c335a",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid parameter: this server does not support the _elements parameter.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_elements=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_elements",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Blacklisted auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e4f3461-688a-40d7-9cbc-f8a8dac0dd19",
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"var env = pm.environment.get(\"env\");",
							"pm.environment.set(\"blacklistedClientId\", pm.globals.get(\"blacklistedClientId\"));",
							"pm.environment.set(\"blacklistedClientSecret\", !pm.globals.get(\"blacklistedClientSecret\"));",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON;",
							"try {",
							"   responseJSON = JSON.parse(responseBody);",
							"   tests['response is valid JSON'] = true;",
							"}",
							"catch (e) {",
							"   responseJSON = {};",
							"   tests['response is valid JSON'] = false;",
							"}",
							"",
							"pm.environment.set(\"blacklistedToken\", responseJSON.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{blacklistedClientId}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{blacklistedClientSecret}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{scheme}}://{{host}}/auth/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"token"
					]
				},
				"description": "Retrieve token for blacklisted ACO"
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Patient export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36a88b45-a0f9-4b53-be18-ade863ea2d86",
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Unauthorized Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Unauthorized Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are unauthorized ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is unauthorized/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Group export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc5ddcf0-0620-4386-8822-7829d1ce3903",
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Unauthorized Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Unauthorized Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are unauthorized ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is unauthorized/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Job retrieval",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e5da2cc-6aaa-49ee-a71c-505d778829b5",
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Unauthorized Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Unauthorized Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are unauthorized ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is unauthorized/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/jobs/1",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Data Retrieval",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78eea071-2715-43ba-8a83-7a149c988f71",
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Unauthorized Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Unauthorized Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are unauthorized ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is unauthorized/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/data/test/test.ndjson",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"data",
						"test",
						"test.ndjson"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}