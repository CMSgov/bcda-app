{
	"info": {
		"_postman_id": "b386f592-ce8a-46dc-af1b-dbec80430274",
		"name": "Beneficiary Claims Data API Tests, Sequential",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "33608e96-4135-4f28-a1aa-900b9e79fe8b",
						"exec": [
							"pm.test(\"Response contains version\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"version\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/_version",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"_version"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7fb065b8-7dc3-4b76-9d74-fef399983b3c",
						"exec": [
							"pm.test(\"Response time is less than 200 ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is CapabilityStatement\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"CapabilityStatement\")",
							"});",
							"",
							"const schema = {",
							"    \"properties\": {",
							"        \"resourceType\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"date\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"publisher\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"kind\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"instantiates\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"software\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"name\": {},",
							"                \"version\": {},",
							"                \"releaseDate\": {}",
							"            }",
							"        },",
							"        \"implementation\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"fhirVersion\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"acceptUnknown\":{",
							"            \"type\": \"string\"",
							"        },",
							"        \"format\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"rest\": {",
							"            \"type\": \"array\"",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Schema is valid\", function() {",
							"    pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/metadata",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"metadata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc8b0dcb-eff0-4ddb-8824-798c27aa5607",
						"exec": [
							"pm.test(\"Response contains database status\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"database\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/_health",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"_health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62eb9303-f406-49a9-87ec-bc6dc4aec0db",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a41ff8f6-cafa-43e5-bdcf-7b4b7b175fe7",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14028e23-c3d0-429b-9679-23907ab9706e",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get job status, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b196343-79de-4d97-a851-80505ef7c57e",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/jobs/{{jobId}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{jobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "847eb790-2cf5-4fc3-8e5c-9360c7c72e82",
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/data/{{jobId}}/{{acoId}}.ndjson",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"data",
						"{{jobId}}",
						"{{acoId}}.ndjson"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6e948def-80fb-4331-9f2b-fea4d3cb5e57",
						"exec": [
							"var env = pm.environment.get(\"env\");",
							"pm.environment.set(\"clientId\", pm.globals.get(\"clientId\"));",
							"pm.environment.set(\"clientSecret\", pm.globals.get(\"clientSecret\"));",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON;",
							"try {",
							"   responseJSON = JSON.parse(responseBody);",
							"   tests['response is valid JSON'] = true;",
							"}",
							"catch (e) {",
							"   responseJSON = {};",
							"   tests['response is valid JSON'] = false;",
							"}",
							"",
							"pm.environment.set(\"token\", responseJSON.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{clientSecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{clientId}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{scheme}}://{{host}}/auth/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2ff34eba-6461-4e82-8e3b-f3ebc512996b",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2ee6e97-ab4c-4204-8476-edcad9c041d6",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"coverageJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9466320d-9473-4f82-81d5-df89bc2826bb",
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type Coverage.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3f6aed2-8e47-483d-9f63-7bd50e7d79b7",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"eobJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f95c9cb-9a3b-495f-9aee-f99a3a269a8c",
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start all type export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57269ceb-078f-4516-ba81-340dd9922e8d",
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c66d61a-7f8a-498b-9cb1-d87fd7bbebbb",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"patientDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "960467bc-44e5-4368-9afa-cac156a41241",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientJobUrl}}",
					"host": [
						"{{patientJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11d99b22-5e01-4704-b84b-dc58c594c31a",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patientDataUrl}}",
					"host": [
						"{{patientDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f888e79-ad78-4768-a921-29b1c876b424",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"   pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"coverageDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9ea5e988-3909-4ec3-981d-1dfcfeb9b6dd",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var coverageJobReq = {",
							"  url: pm.environment.get(\"coverageJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(coverageJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Coverage export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Coverage job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Coverage export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Coverage export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{coverageJobUrl}}",
					"host": [
						"{{coverageJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d8925242-f086-44e7-8cd3-4244563bdcc5",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{coverageDataUrl}}",
					"host": [
						"{{coverageDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "59a308a2-fabb-4e38-8cca-aa23d2c8a0e0",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"eobDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6a04609c-fb9b-46f2-a976-979172d07bba",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"eobJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ExplanationOfBenefit export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for ExplanationOfBenefit job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"EOB export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from EOB export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{eobJobUrl}}",
					"host": [
						"{{eobJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f924e6c9-0cec-44a9-9380-ecec27efff4e",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{eobDataUrl}}",
					"host": [
						"{{eobDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export Valid Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "089daf9f-a6da-40e3-b4b4-5d5214a349fc",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientValidSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "534a6a88-37e2-49ae-a912-ec5c94a4b3bd",
						"exec": [
							"let timestamp = new Date().toJSON();",
							"pm.environment.set('now', timestamp);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient&_since={{now}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "{{now}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export Valid Since job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5afa9599-733a-4d89-8d5a-37cf38ef06fa",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"patientValidSinceDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "49ab8588-8269-486a-96e3-0e8a34e6c30f",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientValidSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientValidSinceJobUrl}}",
					"host": [
						"{{patientValidSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export data Valid Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8418f8fa-a0aa-4d32-bd60-bf0f304a8fc3",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body does not contain data\", function() {",
							"    pm.expect(pm.response.length === 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patientValidSinceDataUrl}}",
					"host": [
						"{{patientValidSinceDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export without Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "262602aa-ad82-470f-bc5b-34d10bd87206",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllNoSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all without Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5276911b-52c0-4ded-af43-46d5153170b4",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllNoSinceJobUrl\", respJson.output[0].url);",
							"",
							"",
							"    pm.test(\"One file in output\", function() {",
							"      pm.expect(respJson.output.length).to.eql(1)",
							"    });",
							"",
							"    pm.test(\"File is of type Patient\", function() {",
							"     pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "caec2f1a-40a3-449c-80d3-b04da8d804db",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllNoSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllNoSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllNoSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (without _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (without _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (without _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (without _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllNoSinceJobUrl}}",
					"host": [
						"{{groupAllNoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all without Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2653615e-66a0-44ae-824f-4a46d89d6724",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllNoSinceJobUrl}}",
					"host": [
						"{{groupAllNoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export with Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a20ec82d-3983-404d-9318-9ce1fb3231b5",
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient&_since=2020-02-13T08:00:00.000-05:00",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "2020-02-13T08:00:00.000-05:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all with Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e6c2933c-ae34-4202-b791-fbe384ce43bf",
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllSinceJobUrl\", respJson.output[0].url);",
							"",
							"    pm.test(\"Two files in output\", function() {",
							"        pm.expect(respJson.output.length).to.eql(2)",
							"    });",
							"",
							"    pm.test(\"File 1 is of type Patient\", function() {",
							"      pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"    ",
							"    pm.test(\"File 2 is of type Patient\", function() {",
							"        pm.expect(respJson.output[1].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4293015a-04cc-4724-962c-e372d6dddf86",
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (with _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (with _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (with _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (with _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllSinceJobUrl}}",
					"host": [
						"{{groupAllSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all with Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21324bf6-812a-4bf2-8e30-cd3554fc4177",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllSinceJobUrl}}",
					"host": [
						"{{groupAllSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start repeated type for /Patient EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7306152-2677-4c55-a05d-f9180c32eb71",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Repeated Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Repeated resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit,ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit,ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export Invalid Since Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4967ff74-0e63-4db3-8418-f8632401b884",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details text is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid date format supplied in _since parameter.  Date must be in FHIR Instant format.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient&_since=123invalid",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "123invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export Invalid Since Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "148f489b-f43c-42e4-86be-94f521648b82",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details text is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid date format supplied in _since parameter.  Date must be in FHIR Instant format.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient&_since=123invalid",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "123invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start /Patient non-existing resource type export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "350f7aaf-9ef9-4e44-b734-82f0669c0275",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Practitioner",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Practitioner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start /Group non-existing resource type export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd37ac91-342b-4ef5-9b7d-e9aa211c2d4f",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"Invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Practitioner",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Practitioner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start repeated type for /Group EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "887c86c8-a8b3-4532-bac4-e5731da0f3c4",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Repeated Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Repeated resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=ExplanationOfBenefit,ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit,ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export, invalid group id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c868430f-d54a-417d-922f-69c3e2ece828",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid group ID\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/sub/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"sub",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export, invalid _elements param",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d66c8097-51e5-4e33-90a4-0ff07db0d725",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid parameter: this server does not support the _elements parameter.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_elements=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_elements",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export, invalid _elements param",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8977ed30-5f87-442a-a172-b30b237facea",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid parameter: this server does not support the _elements parameter.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_elements=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_elements",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Blacklisted auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b3c724d2-d1b0-4478-aebc-d500c3937443",
						"exec": [
							"var env = pm.environment.get(\"env\");",
							"pm.environment.set(\"blacklistedClientId\", pm.globals.get(\"blacklistedClientId\"));",
							"pm.environment.set(\"blacklistedClientSecret\", pm.globals.get(\"blacklistedClientSecret\"));",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON;",
							"try {",
							"   responseJSON = JSON.parse(responseBody);",
							"   tests['response is valid JSON'] = true;",
							"}",
							"catch (e) {",
							"   responseJSON = {};",
							"   tests['response is valid JSON'] = false;",
							"}",
							"",
							"pm.environment.set(\"blacklistedToken\", responseJSON.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{blacklistedClientId}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{blacklistedClientSecret}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{scheme}}://{{host}}/auth/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"token"
					]
				},
				"description": "Retrieve token for blacklisted ACO"
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Patient export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad03134f-7bd8-4d62-8fc8-0c5ba97034f9",
						"exec": [
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are blacklisted ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is blacklisted/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Group export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4c5702a-1743-4ae3-943b-2faaea687a2d",
						"exec": [
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are blacklisted ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is blacklisted/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Job retrieval",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2dfe2874-cac1-415b-b4c4-7d37dd726a4b",
						"exec": [
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are blacklisted ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is blacklisted/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/jobs/1",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Data Retrieval",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e2dfa16-8eb1-4718-9d16-b5f8708d9af3",
						"exec": [
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are blacklisted ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is blacklisted/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/data/test/test.ndjson",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"data",
						"test",
						"test.ndjson"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}