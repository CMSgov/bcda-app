{
	"info": {
		"_postman_id": "cace9614-90e5-43ce-8862-cc0bf36b95a3",
		"name": "Beneficiary Claims Data API Tests, Sequential",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains version\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"version\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/_version",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"_version"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is CapabilityStatement\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"CapabilityStatement\")",
							"});",
							"",
							"const schema = {",
							"    \"properties\": {",
							"        \"resourceType\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"status\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"date\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"publisher\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"kind\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"instantiates\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"software\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"name\": {},",
							"                \"version\": {},",
							"                \"releaseDate\": {}",
							"            }",
							"        },",
							"        \"implementation\": {",
							"            \"type\": \"object\"",
							"        },",
							"        \"fhirVersion\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"acceptUnknown\":{",
							"            \"type\": \"string\"",
							"        },",
							"        \"format\": {",
							"            \"type\": \"array\"",
							"        },",
							"        \"rest\": {",
							"            \"type\": \"array\"",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Schema is valid\", function() {",
							"    pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/metadata",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"metadata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains database status\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"database\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/_health",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"_health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Swagger V1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is text/html; charset=utf-8\", function() {",
							"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/swagger/",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"swagger",
						""
					]
				},
				"description": "TODO (BCDA-4109) - Remove test verifying v1 specific artifacts"
			},
			"response": []
		},
		{
			"name": "Swagger V2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is text/html; charset=utf-8\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/swagger/",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"swagger",
						""
					]
				},
				"description": "Make request to location that should contain v1 and v2 API requests"
			},
			"response": []
		},
		{
			"name": "Get Attribution Status v1, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/attribution_status",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"attribution_status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Attribution Status v2, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/attribution_status",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"attribution_status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get job status, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/jobs/{{jobId}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{jobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete job, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/jobs/{{jobId}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{jobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export v2, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export v2, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export v2, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Invalid Token\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Invalid Token\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get job status v2, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/jobs/{{jobId}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"jobs",
						"{{jobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete job v2, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/jobs/{{jobId}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"jobs",
						"{{jobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data, no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    var respJson = pm.response.json();",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/data/{{jobId}}/{{acoId}}.ndjson",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"data",
						"{{jobId}}",
						"{{acoId}}.ndjson"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var env = pm.environment.get(\"env\");",
							"pm.environment.set(\"clientId\", pm.globals.get(\"clientId\"));",
							"pm.environment.set(\"clientSecret\", pm.globals.get(\"clientSecret\"));",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON;",
							"try {",
							"   responseJSON = JSON.parse(responseBody);",
							"   tests['response is valid JSON'] = true;",
							"}",
							"catch (e) {",
							"   responseJSON = {};",
							"   tests['response is valid JSON'] = false;",
							"}",
							"",
							"pm.environment.set(\"token\", responseJSON.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{clientSecret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{clientId}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{scheme}}://{{host}}/auth/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Attribution Status v1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"const schema = {",
							"    \"properties\": {",
							"        \"ingestion_dates\": {",
							"            \"type\": \"array\",",
							"            \"items\": [{",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"type\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"timestamp\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                }",
							"            }]",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Schema is valid\", function() {",
							"    pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/attribution_status",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"attribution_status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Attribution Status v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function() {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"const schema = {",
							"    \"properties\": {",
							"        \"ingestion_dates\": {",
							"            \"type\": \"array\",",
							"            \"items\": [{",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"type\": {",
							"                        \"type\": \"string\"",
							"                    },",
							"                    \"timestamp\": {",
							"                        \"type\": \"string\"",
							"                    }",
							"                }",
							"            }]",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Schema is valid\", function() {",
							"    pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/attribution_status",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"attribution_status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"coverageJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start ALR export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.globals.get(\"alrEnabled\") != \"true\") {",
							"    console.log(\"Skipping ALR test. ALR is not enabled.\")",
							"    // Set the alrJobUrl to avoid pre-test validation checks (like ENOTFOUND)",
							"    pm.environment.set(\"alrJobUrl\", \"https://bcda.cms.gov\")",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"alrJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/alr/Patient/$export?_type=Patient,Observation",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"alr",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient,Observation"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export for Deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"eobJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete job, valid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{eobJobUrl}}",
					"host": [
						"{{eobJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"eobJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientv2JobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Coverage export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"coveragev2JobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=Coverage",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Coverage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export v2 for Deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"eobv2JobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete job v2, valid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{eobv2JobUrl}}",
					"host": [
						"{{eobv2JobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start EOB export v2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    pm.test(\"Status code is 404\", function() {",
							"        pm.response.to.have.status(404);",
							"    });",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"eobv2JobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Patient/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export v2 job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    console.log(\"Not running Patient export v2 job status, v2 endpoints have been disabled\");",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"patientv2DataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    return;",
							"}",
							"",
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientv2JobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export v2 still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient v2 job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export v2 job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export v2 job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientv2JobUrl}}",
					"host": [
						"{{patientv2JobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export v2 data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    console.log(\"Not running Patient export v2 data, v2 endpoints have been disabled\");",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patientv2DataUrl}}",
					"host": [
						"{{patientv2DataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export v2 job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    console.log(\"Not running Coverage export v2 job status, v2 endpoints have been disabled\");",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"   pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"coveragev2DataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    return;",
							"}",
							"",
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var coverageJobReq = {",
							"  url: pm.environment.get(\"coveragev2JobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(coverageJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Coverage export v2 still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Coverage job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Coverage export v2 job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Coverage export v2 job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{coveragev2JobUrl}}",
					"host": [
						"{{coveragev2JobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export v2 data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    console.log(\"Not running Coverage export v2 data, v2 endpoints have been disabled\");",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{coveragev2DataUrl}}",
					"host": [
						"{{coveragev2DataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export v2 job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    console.log(\"Not running EOB export v2 job status, v2 endpoints have been disabled\");",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"eobv2DataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    return;",
							"}",
							"",
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"eobv2JobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ExplanationOfBenefit export v2 still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for ExplanationOfBenefit v2 job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"EOB export v2 job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from EOB export v2 job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{eobv2JobUrl}}",
					"host": [
						"{{eobv2JobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export v2 data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var v2Disabled = pm.globals.get(\"v2Disabled\") == \"true\"",
							"",
							"if (v2Disabled) {",
							"    console.log(\"Not running EOB export v2 data, v2 endpoints have been disabled\");",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{eobv2DataUrl}}",
					"host": [
						"{{eobv2DataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"patientDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientJobUrl}}",
					"host": [
						"{{patientJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{patientDataUrl}}",
					"host": [
						"{{patientDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"   pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"coverageDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var coverageJobReq = {",
							"  url: pm.environment.get(\"coverageJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(coverageJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Coverage export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Coverage job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Coverage export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Coverage export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{coverageJobUrl}}",
					"host": [
						"{{coverageJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Coverage export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{coverageDataUrl}}",
					"host": [
						"{{coverageDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"eobDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"eobJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ExplanationOfBenefit export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for ExplanationOfBenefit job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"EOB export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from EOB export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{eobJobUrl}}",
					"host": [
						"{{eobJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get EOB export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{eobDataUrl}}",
					"host": [
						"{{eobDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ALR export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.globals.get(\"alrEnabled\") != \"true\") {",
							"    console.log(\"Skipping ALR test. ALR is not enabled.\")",
							"    // Set the alrDataUrl to avoid pre-test validation checks (like ENOTFOUND)",
							"    pm.environment.set(\"alrDataUrl\", \"https://bcda.cms.gov\")",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"alrDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"if (pm.globals.get(\"alrEnabled\") != \"true\") {",
							"    console.log(\"Skipping pre-request ALR script. ALR is not enabled.\")",
							"    return;",
							"}",
							"",
							"var alrJobReq = {",
							"  url: pm.environment.get(\"alrJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(alrJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ALR export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for ALR job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"ALR export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from ALR export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{alrJobUrl}}",
					"host": [
						"{{alrJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ALR export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.globals.get(\"alrEnabled\") != \"true\") {",
							"    console.log(\"Skipping ALR test. ALR is not enabled.\")",
							"    return;",
							"}",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{alrDataUrl}}",
					"host": [
						"{{alrDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export Valid Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"patientValidSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let timestamp = new Date().toJSON();",
							"pm.environment.set('now', timestamp);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient&_since={{now}}",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "{{now}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Patient export Valid Since job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"        pm.expect(respJson.output).to.be.empty;",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"patientValidSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Patient export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Patient job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Patient export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Patient export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{patientValidSinceJobUrl}}",
					"host": [
						"{{patientValidSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export without Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllNoSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all without Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllNoSinceJobUrl\", respJson.output[0].url);",
							"",
							"",
							"    pm.test(\"One file in output\", function() {",
							"      pm.expect(respJson.output.length).to.eql(1)",
							"    });",
							"",
							"    pm.test(\"File is of type Patient\", function() {",
							"     pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllNoSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllNoSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllNoSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (without _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (without _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (without _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (without _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllNoSinceJobUrl}}",
					"host": [
						"{{groupAllNoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all without Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllNoSinceJobUrl}}",
					"host": [
						"{{groupAllNoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export v2 without Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllv2NoSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Group/all/$export?_type=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all v2 without Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllv2NoSinceJobUrl\", respJson.output[0].url);",
							"",
							"",
							"    pm.test(\"One file in output\", function() {",
							"      pm.expect(respJson.output.length).to.eql(1)",
							"    });",
							"",
							"    pm.test(\"File is of type Patient\", function() {",
							"     pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllNoSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllv2NoSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllNoSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (without _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (without _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (without _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (without _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllv2NoSinceJobUrl}}",
					"host": [
						"{{groupAllv2NoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all v2 without Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllv2NoSinceJobUrl}}",
					"host": [
						"{{groupAllv2NoSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/all export with Since",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupAllSinceJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient&_since=2020-02-13T08:00:00.000-05:00",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "2020-02-13T08:00:00.000-05:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all with Since export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupAllSinceJobUrl\", respJson.output[0].url);",
							"",
							"    pm.test(\"Two files in output\", function() {",
							"        pm.expect(respJson.output.length).to.eql(2)",
							"    });",
							"",
							"    pm.test(\"File 1 is of type Patient\", function() {",
							"      pm.expect(respJson.output[0].type).to.eql(\"Patient\")",
							"    });",
							"    ",
							"    pm.test(\"File 2 is of type Patient\", function() {",
							"        pm.expect(respJson.output[1].type).to.eql(\"Patient\")",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var groupAllSinceJobReq = {",
							"  url: pm.environment.get(\"groupAllSinceJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(groupAllSinceJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"Group/all (with _since) export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.log(\"Retry limit reached for Group/all (with _since) job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"Group/all (with _since) export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from Group/all (with _since) export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupAllSinceJobUrl}}",
					"host": [
						"{{groupAllSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/all with Since export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupAllSinceJobUrl}}",
					"host": [
						"{{groupAllSinceJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/runout export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupRunoutJobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/runout/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"runout",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/runout export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupRunoutDataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"groupRunoutJobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ExplanationOfBenefit export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.error(\"Retry limit reached for ExplanationOfBenefit job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"EOB export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from EOB export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupRunoutJobUrl}}",
					"host": [
						"{{groupRunoutJobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/runout export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupRunoutDataUrl}}",
					"host": [
						"{{groupRunoutDataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group/runout v2 export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function() {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Has Content-Location header\", function() {",
							"    pm.response.to.have.header(\"Content-Location\");",
							"});",
							"",
							"pm.environment.set(\"groupRunoutv2JobUrl\", pm.response.headers.get(\"Content-Location\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v2/Group/runout/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v2",
						"Group",
						"runout",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/runout export job status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 or 200\", function() {",
							"     pm.expect(pm.response.code).to.be.oneOf([202,200]);",
							"});",
							"",
							"if (pm.response.code === 202) {",
							"    pm.test(\"X-Progress header is In Progress\", function() {",
							"        pm.expect(/^In Progress \\(\\d{1,3}%\\)$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"properties\": {",
							"            \"transactionTime\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"request\": {",
							"                \"type\": \"string\"",
							"            },",
							"            \"requiresAccessToken\": {",
							"                \"type\": \"boolean\"",
							"            },",
							"            \"output\": {",
							"                \"type\": \"array\"",
							"            },",
							"            \"error\": {",
							"                \"type\": \"array\"",
							"            }",
							"        }",
							"    };",
							"    ",
							"    var respJson = pm.response.json();",
							"    ",
							"    pm.test(\"Schema is valid\", function() {",
							"        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
							"    });",
							"    ",
							"    pm.environment.set(\"groupRunoutv2DataUrl\", respJson.output[0].url);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const retryDelay = 5000;",
							"const maxRetries = 10;",
							"",
							"var eobJobReq = {",
							"  url: pm.environment.get(\"groupRunoutv2JobUrl\"),",
							"  method: \"GET\",",
							"  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
							"};",
							"",
							"function awaitExportJob(retryCount) {",
							"    pm.sendRequest(eobJobReq, function (err, response) {",
							"        if (err) {",
							"            console.error(err);",
							"        } else if (response.code == 202) {",
							"            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
							"               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
							"            });",
							"            if (retryCount < maxRetries) {",
							"                console.log(\"ExplanationOfBenefit export still in progress. Retrying...\");",
							"                setTimeout(function() {",
							"                    awaitExportJob(++retryCount);",
							"                }, retryDelay);",
							"            } else {",
							"                console.error(\"Retry limit reached for ExplanationOfBenefit job status.\");",
							"                postman.setNextRequest(null);",
							"            }",
							"        } else if (response.code == 200) {",
							"            console.log(\"EOB export job complete.\");",
							"        } else {",
							"            console.error(\"Unexpected response from EOB export job: \" + response.status);",
							"        }",
							"    });",
							"}",
							"",
							"awaitExportJob(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json",
						"disabled": true
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{groupRunoutv2JobUrl}}",
					"host": [
						"{{groupRunoutv2JobUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group/runout export data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body contains data\", function() {",
							"    pm.expect(pm.response.length > 0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{groupRunoutv2DataUrl}}",
					"host": [
						"{{groupRunoutv2DataUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start repeated type for /Patient EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Repeated resource type ExplanationOfBenefit\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Repeated resource type ExplanationOfBenefit\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=ExplanationOfBenefit,ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit,ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export Invalid Since Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details text is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid date format supplied in _since parameter.  Date must be in FHIR Instant format.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Patient&_since=123invalid",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "123invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export Invalid Since Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details text is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid date format supplied in _since parameter.  Date must be in FHIR Instant format.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Patient&_since=123invalid",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Patient"
						},
						{
							"key": "_since",
							"value": "123invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start /Patient non-existing resource type export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_type=Practitioner",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Practitioner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start /Group non-existing resource type export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid Resource Type\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.include(\"invalid resource type\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=Practitioner",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "Practitioner"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start repeated type for /Group EOB export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Repeated resource type ExplanationOfBenefit\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Repeated resource type ExplanationOfBenefit\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_type=ExplanationOfBenefit,ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit,ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export, invalid group id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid group ID\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/fhir+json",
						"type": "text"
					},
					{
						"key": "Prefer",
						"value": "respond-async",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/sub/$export?_type=ExplanationOfBenefit",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"sub",
						"$export"
					],
					"query": [
						{
							"key": "_type",
							"value": "ExplanationOfBenefit"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Patient export, invalid _elements param",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid parameter: this server does not support the _elements parameter.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export?_elements=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					],
					"query": [
						{
							"key": "_elements",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Group export, invalid _elements param",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Request Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Request Error\")",
							"});",
							"",
							"pm.test(\"Issue details text is Invalid group ID\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.eql(\"Invalid parameter: this server does not support the _elements parameter.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export?_elements=Patient",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					],
					"query": [
						{
							"key": "_elements",
							"value": "Patient"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Blacklisted auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"var env = pm.environment.get(\"env\");",
							"pm.environment.set(\"blacklistedClientId\", pm.globals.get(\"blacklistedClientId\"));",
							"pm.environment.set(\"blacklistedClientSecret\", !pm.globals.get(\"blacklistedClientSecret\"));",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON;",
							"try {",
							"   responseJSON = JSON.parse(responseBody);",
							"   tests['response is valid JSON'] = true;",
							"}",
							"catch (e) {",
							"   responseJSON = {};",
							"   tests['response is valid JSON'] = false;",
							"}",
							"",
							"pm.environment.set(\"blacklistedToken\", responseJSON.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{blacklistedClientId}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{blacklistedClientSecret}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{scheme}}://{{host}}/auth/token",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"token"
					]
				},
				"description": "Retrieve token for blacklisted ACO"
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Patient export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Unauthorized Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Unauthorized Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are unauthorized ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is unauthorized/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Patient/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Patient",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Group export",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Unauthorized Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Unauthorized Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are unauthorized ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is unauthorized/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/Group/all/$export",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"Group",
						"all",
						"$export"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Job retrieval",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Unauthorized Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Unauthorized Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are unauthorized ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is unauthorized/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/api/v1/jobs/1",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Blacklisted Data Retrieval",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (!pm.globals.get(\"blacklistedClientId\") || !pm.globals.get(\"blacklistedClientSecret\")) {",
							"    console.log(\"Blacklist test skipped due to creds not set.\")",
							"    return",
							"}",
							"pm.test(\"Status code is 403 (Unauthorized)\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"var respJson = pm.response.json();",
							"",
							"pm.test(\"Resource type is OperationOutcome\", function() {",
							"    pm.expect(respJson.resourceType).to.eql(\"OperationOutcome\")",
							"});",
							"",
							"pm.test(\"Issue details code is Unauthorized Error\", function() {",
							"    pm.expect(respJson.issue[0].details.coding[0].code).to.eql(\"Unauthorized Error\")",
							"});",
							"",
							"pm.test(\"Issue details text are unauthorized ACO\", function() {",
							"    pm.expect(respJson.issue[0].details.text).to.match(/ACO \\(CMS_ID: .*\\) is unauthorized/)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{blacklistedToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/fhir+json"
					},
					{
						"key": "Prefer",
						"type": "text",
						"value": "respond-async"
					}
				],
				"url": {
					"raw": "{{scheme}}://{{host}}/data/test/test.ndjson",
					"protocol": "{{scheme}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"data",
						"test",
						"test.ndjson"
					]
				}
			},
			"response": []
		}
	]
}