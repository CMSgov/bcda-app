{
  "info": {
    "_postman_id": "9cc2977d-ced3-4492-80d0-cee9169ec057",
    "name": "BCDA PAC Postman Smoke Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "11322751"
  },
  "item": [
    {
      "name": "Valid Token",
      "item": [
        {
          "name": "Authentication",
          "item": [
            {
              "name": "Get auth token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var env = pm.environment.get(\"env\");",
                      "pm.environment.set(\"clientId\", pm.globals.get(\"clientId\"));",
                      "pm.environment.set(\"clientSecret\", pm.globals.get(\"clientSecret\"));",
                      "pm.test(\"Status code is 200\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "var responseJSON;",
                      "try {",
                      "   responseJSON = JSON.parse(responseBody);",
                      "   tests['response is valid JSON'] = true;",
                      "}",
                      "catch (e) {",
                      "   responseJSON = {};",
                      "   tests['response is valid JSON'] = false;",
                      "}",
                      "",
                      "pm.environment.set(\"token\", responseJSON.access_token);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": {
                    "password": "{{clientSecret}}",
                    "username": "{{clientId}}"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Prefer",
                    "value": "respond-async",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/fhir+json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{scheme}}://{{host}}/auth/token"
              },
              "response": []
            }
          ]
        },
        {
          "name": "Patient",
          "item": [
            {
              "name": "General",
              "item": [
                {
                  "name": "Start Patient v2 export",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {\t",
                          "    console.log(\"EOY mode is enabled - Skipping Patient/all endpoint request\");\t\t\t\t    ",
                          "    pm.environment.set(\"smokeTestPatientJobUrl\", \"https://bcda.cms.gov\");",
                          "",
                          "    pm.test(\"Status code is 400, 404, or 500\", function() {",
                          "        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                          "    });",
                          "    return;",
                          "} else {",
                          "    pm.test(\"Status code is 202\", function() {",
                          "        pm.response.to.have.status(202);",
                          "    });",
                          "",
                          "    pm.test(\"Has Content-Location header\", function() {",
                          "        pm.response.to.have.header(\"Content-Location\");",
                          "    });",
                          "",
                          "    pm.environment.set(\"smokeTestPatientJobUrl\", pm.response.headers.get(\"Content-Location\"));",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/fhir+json",
                        "type": "text"
                      },
                      {
                        "key": "Prefer",
                        "value": "respond-async",
                        "type": "text"
                      }
                    ],
                    "url": "{{scheme}}://{{host}}/api/v2/Patient/$export"
                  },
                  "response": []
                },
                {
                  "name": "Get Patient v2 export job status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get('maintenanceMode');",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Patient/all endpoint request for job status\");",
                          "",
                          "    pm.environment.set(\"smokeTestPatientDataUrl\", \"https://bcda.cms.gov\")",
                          "    return;",
                          "}",
                          "",
                          "pm.test(\"Status code is 202 or 200\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([202, 200]);",
                          "});",
                          "",
                          "if (pm.response.code === 202) {",
                          "    pm.test(\"X-Progress header is Pending or In Progress\", function () {",
                          "        pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
                          "    });",
                          "} else if (pm.response.code === 200) {",
                          "    const schema = {",
                          "        \"properties\": {",
                          "            \"transactionTime\": {",
                          "                \"type\": \"string\"",
                          "            },",
                          "            \"request\": {",
                          "                \"type\": \"string\"",
                          "            },",
                          "            \"requiresAccessToken\": {",
                          "                \"type\": \"boolean\"",
                          "            },",
                          "            \"output\": {",
                          "                \"type\": \"array\"",
                          "            },",
                          "            \"error\": {",
                          "                \"type\": \"array\"",
                          "            }",
                          "        }",
                          "    };",
                          "",
                          "    var respJson = pm.response.json();",
                          "",
                          "    pm.test(\"Schema is valid\", function () {",
                          "        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
                          "    });",
                          "",
                          "    pm.test(\"Contains Required Resources\", () => {",
                          "        const requiredResources = [\"ExplanationOfBenefit\", \"Patient\", \"Coverage\", \"Claim\", \"ClaimResponse\"];",
                          "        const returnedResources = respJson.output.map(r => r.type);",
                          "",
                          "        for (const resource of requiredResources) {",
                          "            pm.expect(returnedResources, resource + \" is required\").to.include(resource);",
                          "        }",
                          "    });",
                          "",
                          "    pm.environment.set(\"smokeTestPatientDataUrl\", respJson.output[0].url);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const retryDelay = 5000;",
                          "const maxRetries = 20;",
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Patient/all pre-request\")",
                          "    return;",
                          "}",
                          "",
                          "var eobJobReq = {",
                          "  url: pm.environment.get(\"smokeTestPatientJobUrl\"),",
                          "  method: \"GET\",",
                          "  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
                          "};",
                          "",
                          "function awaitExportJob(retryCount) {",
                          "    pm.sendRequest(eobJobReq, function (err, response) {",
                          "        if (err) {",
                          "            console.error(err);",
                          "        } else if (response.code == 202) {",
                          "            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
                          "               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
                          "            });",
                          "            if (retryCount < maxRetries) {",
                          "                console.log(\"Patient export still in progress. Retrying...\");",
                          "                setTimeout(function() {",
                          "                    awaitExportJob(++retryCount);",
                          "                }, retryDelay);",
                          "            } else {",
                          "                console.log(\"Retry limit reached for Patient job status.\");",
                          "                postman.setNextRequest(null);",
                          "            }",
                          "        } else if (response.code == 200) {",
                          "            console.log(\"Patient export job complete.\");",
                          "        } else {",
                          "            console.error(\"Unexpected response from Patient export job: \" + response.status);",
                          "        }",
                          "    });",
                          "}",
                          "",
                          "awaitExportJob(1);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "type": "text",
                        "value": "application/fhir+json"
                      },
                      {
                        "key": "Prefer",
                        "type": "text",
                        "value": "respond-async"
                      }
                    ],
                    "url": "{{smokeTestPatientJobUrl}}"
                  },
                  "response": []
                },
                {
                  "name": "Get Patient v2 export job data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Patient/all endpoint request\");",
                          "    return;",
                          "}",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body contains data\", function () {",
                          "    pm.expect(pm.response.length > 0)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "type": "text",
                        "value": "application/fhir+json"
                      },
                      {
                        "key": "Prefer",
                        "type": "text",
                        "value": "respond-async"
                      }
                    ],
                    "url": "{{smokeTestPatientDataUrl}}"
                  },
                  "response": []
                },
                {
                  "name": "Start Patient v1 export",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {\t",
                          "    console.log(\"EOY mode is enabled - Skipping Patient/all endpoint request\");\t\t\t\t    ",
                          "    pm.environment.set(\"smokeTestPatientv1JobUrl\", \"https://bcda.cms.gov\");",
                          "",
                          "    pm.test(\"Status code is 400, 404, or 500\", function() {",
                          "        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                          "    });",
                          "    return;",
                          "} else {",
                          "    pm.test(\"Status code is 202\", function() {",
                          "        pm.response.to.have.status(202);",
                          "    });",
                          "",
                          "    pm.test(\"Has Content-Location header\", function() {",
                          "        pm.response.to.have.header(\"Content-Location\");",
                          "    });",
                          "",
                          "    pm.environment.set(\"smokeTestPatientv1JobUrl\", pm.response.headers.get(\"Content-Location\"));",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/fhir+json",
                        "type": "text"
                      },
                      {
                        "key": "Prefer",
                        "value": "respond-async",
                        "type": "text"
                      }
                    ],
                    "url": "{{scheme}}://{{host}}/api/v1/Patient/$export"
                  },
                  "response": []
                },
                {
                  "name": "Get Patient v1 export job status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get('maintenanceMode');",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Patient/all endpoint request for job status\");",
                          "",
                          "    pm.environment.set(\"smokeTestPatientv1DataUrl\", \"https://bcda.cms.gov\")",
                          "    return;",
                          "}",
                          "",
                          "pm.test(\"Status code is 202 or 200\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([202, 200]);",
                          "});",
                          "",
                          "if (pm.response.code === 202) {",
                          "    pm.test(\"X-Progress header is Pending or In Progress\", function () {",
                          "        pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
                          "    });",
                          "} else if (pm.response.code === 200) {",
                          "    const schema = {",
                          "        \"properties\": {",
                          "            \"transactionTime\": {",
                          "                \"type\": \"string\"",
                          "            },",
                          "            \"request\": {",
                          "                \"type\": \"string\"",
                          "            },",
                          "            \"requiresAccessToken\": {",
                          "                \"type\": \"boolean\"",
                          "            },",
                          "            \"output\": {",
                          "                \"type\": \"array\"",
                          "            },",
                          "            \"error\": {",
                          "                \"type\": \"array\"",
                          "            }",
                          "        }",
                          "    };",
                          "",
                          "    var respJson = pm.response.json();",
                          "",
                          "    pm.test(\"Schema is valid\", function () {",
                          "        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
                          "    });",
                          "",
                          "    pm.test(\"Contains Required Resources\", () => {",
                          "        const requiredResources = [\"Patient\", \"ExplanationOfBenefit\", \"Coverage\"];",
                          "        const otherResources = [ \"Claim\", \"ClaimResponse\"];",
                          "        const returnedResources = respJson.output.map(r => r.type);",
                          "",
                          "        for (const resource of requiredResources) {",
                          "            pm.expect(returnedResources, resource + \" is required\").to.include(resource);",
                          "        }",
                          "",
                          "        for (const resource of otherResources) {",
                          "            pm.expect(returnedResources, resource + \" resource type should not be returned\").to.not.include(resource);",
                          "        }",
                          "      });",
                          "      ",
                          "    pm.environment.set(\"smokeTestPatientv1DataUrl\", respJson.output[0].url);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const retryDelay = 5000;",
                          "const maxRetries = 20;",
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Patient/all pre-request\")",
                          "    return;",
                          "}",
                          "",
                          "var eobJobReq = {",
                          "  url: pm.environment.get(\"smokeTestPatientv1JobUrl\"),",
                          "  method: \"GET\",",
                          "  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
                          "};",
                          "",
                          "function awaitExportJob(retryCount) {",
                          "    pm.sendRequest(eobJobReq, function (err, response) {",
                          "        if (err) {",
                          "            console.error(err);",
                          "        } else if (response.code == 202) {",
                          "            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
                          "               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
                          "            });",
                          "            if (retryCount < maxRetries) {",
                          "                console.log(\"Patient export still in progress. Retrying...\");",
                          "                setTimeout(function() {",
                          "                    awaitExportJob(++retryCount);",
                          "                }, retryDelay);",
                          "            } else {",
                          "                console.log(\"Retry limit reached for Patient job status.\");",
                          "                postman.setNextRequest(null);",
                          "            }",
                          "        } else if (response.code == 200) {",
                          "            console.log(\"Patient export job complete.\");",
                          "        } else {",
                          "            console.error(\"Unexpected response from Patient export job: \" + response.status);",
                          "        }",
                          "    });",
                          "}",
                          "",
                          "awaitExportJob(1);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "type": "text",
                        "value": "application/fhir+json"
                      },
                      {
                        "key": "Prefer",
                        "type": "text",
                        "value": "respond-async"
                      }
                    ],
                    "url": "{{smokeTestPatientv1JobUrl}}"
                  },
                  "response": []
                },
                {
                  "name": "Get Patient v1 export job data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Patient/all endpoint request\");",
                          "    return;",
                          "}",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body contains data\", function () {",
                          "    pm.expect(pm.response.length > 0)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "type": "text",
                        "value": "application/fhir+json"
                      },
                      {
                        "key": "Prefer",
                        "type": "text",
                        "value": "respond-async"
                      }
                    ],
                    "url": "{{smokeTestPatientv1DataUrl}}"
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Group",
          "item": [
            {
              "name": "/all",
              "item": [
                {
                  "name": "Start Group export",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {\t",
                          "    console.log(\"EOY mode is enabled - Skipping Group/all endpoint request\");\t\t\t\t    ",
                          "    pm.environment.set(\"smokeTestGroupAllJobUrl\", \"https://bcda.cms.gov\");",
                          "",
                          "    pm.test(\"Status code is 400, 404, or 500\", function() {",
                          "        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                          "    });",
                          "    return;",
                          "} else {",
                          "    pm.test(\"Status code is 202\", function () {",
                          "        pm.response.to.have.status(202);",
                          "    });",
                          "",
                          "    pm.test(\"Has Content-Location header\", function () {",
                          "        pm.response.to.have.header(\"Content-Location\");",
                          "    });",
                          "",
                          "    pm.environment.set(\"smokeTestGroupAllJobUrl\", pm.response.headers.get(\"Content-Location\"));",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/fhir+json",
                        "type": "text"
                      },
                      {
                        "key": "Prefer",
                        "value": "respond-async",
                        "type": "text"
                      }
                    ],
                    "url": "{{scheme}}://{{host}}/api/v2/Group/all/$export"
                  },
                  "response": []
                },
                {
                  "name": "Get Group export job status",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const retryDelay = 5000;",
                          "const maxRetries = 20;",
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Group/all pre-request\")",
                          "    return;",
                          "}",
                          "",
                          "var eobJobReq = {",
                          "  url: pm.environment.get(\"smokeTestGroupAllJobUrl\"),",
                          "  method: \"GET\",",
                          "  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
                          "};",
                          "",
                          "function awaitExportJob(retryCount) {",
                          "    pm.sendRequest(eobJobReq, function (err, response) {",
                          "        if (err) {",
                          "            console.error(err);",
                          "        } else if (response.code == 202) {",
                          "            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
                          "               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
                          "            });",
                          "            if (retryCount < maxRetries) {",
                          "                console.log(\"Group/all export still in progress. Retrying...\");",
                          "                setTimeout(function() {",
                          "                    awaitExportJob(++retryCount);",
                          "                }, retryDelay);",
                          "            } else {",
                          "                console.log(\"Retry limit reached for Group/all job status.\");",
                          "                postman.setNextRequest(null);",
                          "            }",
                          "        } else if (response.code == 200) {",
                          "            console.log(\"Group/all export job complete.\");",
                          "        } else {",
                          "            console.error(\"Unexpected response from Group/all export job: \" + response.status);",
                          "        }",
                          "    });",
                          "}",
                          "",
                          "awaitExportJob(1);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Group/all endpoint request for job status\");",
                          "    ",
                          "    pm.environment.set(\"smokeTestGroupAllDataUrl\", \"https://bcda.cms.gov\")",
                          "    return;",
                          "}",
                          "",
                          "pm.test(\"Status code is 202 or 200\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([202, 200]);",
                          "});",
                          "",
                          "if (pm.response.code === 202) {",
                          "    pm.test(\"X-Progress header is Pending or In Progress\", function () {",
                          "        pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
                          "    });",
                          "} else if (pm.response.code === 200) {",
                          "    const schema = {",
                          "        \"properties\": {",
                          "            \"transactionTime\": {",
                          "                \"type\": \"string\"",
                          "            },",
                          "            \"request\": {",
                          "                \"type\": \"string\"",
                          "            },",
                          "            \"requiresAccessToken\": {",
                          "                \"type\": \"boolean\"",
                          "            },",
                          "            \"output\": {",
                          "                \"type\": \"array\"",
                          "            },",
                          "            \"error\": {",
                          "                \"type\": \"array\"",
                          "            }",
                          "        }",
                          "    };",
                          "",
                          "    var respJson = pm.response.json();",
                          "",
                          "    pm.test(\"Schema is valid\", function () {",
                          "        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
                          "    });",
                          "",
                          "    pm.test(\"Contains Required Resources\", () => {",
                          "        const requiredResources = [\"ExplanationOfBenefit\", \"Patient\", \"Coverage\", \"Claim\", \"ClaimResponse\"];",
                          "        const returnedResources = respJson.output.map(r => r.type);",
                          "",
                          "        for (const resource of requiredResources) {",
                          "            pm.expect(returnedResources, resource + \" is required\").to.include(resource);",
                          "        }",
                          "    });",
                          "",
                          "    pm.environment.set(\"smokeTestGroupAllDataUrl\", respJson.output[0].url);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/fhir+json",
                        "type": "text"
                      },
                      {
                        "key": "Prefer",
                        "value": "respond-async",
                        "type": "text"
                      }
                    ],
                    "url": "{{smokeTestGroupAllJobUrl}}"
                  },
                  "response": []
                },
                {
                  "name": "Get Group export job data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Group/all endpoint request\");",
                          "    return;",
                          "}",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body contains data\", function () {",
                          "    pm.expect(pm.response.length > 0)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "type": "text",
                        "value": "application/fhir+json"
                      },
                      {
                        "key": "Prefer",
                        "type": "text",
                        "value": "respond-async"
                      }
                    ],
                    "url": "{{smokeTestGroupAllDataUrl}}"
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "/all",
              "item": [
                {
                  "name": "Start Group v1 export",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {\t",
                          "    console.log(\"EOY mode is enabled - Skipping Group/all endpoint request\");\t\t\t\t    ",
                          "    pm.environment.set(\"smokeTestGroupAllJobUrlv1\", \"https://bcda.cms.gov\");",
                          "",
                          "    pm.test(\"Status code is 400, 404, or 500\", function() {",
                          "        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                          "    });",
                          "    return;",
                          "} else {",
                          "    pm.test(\"Status code is 202\", function () {",
                          "        pm.response.to.have.status(202);",
                          "    });",
                          "",
                          "    pm.test(\"Has Content-Location header\", function () {",
                          "        pm.response.to.have.header(\"Content-Location\");",
                          "    });",
                          "",
                          "    pm.environment.set(\"smokeTestGroupAllJobUrlv1\", pm.response.headers.get(\"Content-Location\"));",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/fhir+json",
                        "type": "text"
                      },
                      {
                        "key": "Prefer",
                        "value": "respond-async",
                        "type": "text"
                      }
                    ],
                    "url": "{{scheme}}://{{host}}/api/v1/Group/all/$export"
                  },
                  "response": []
                },
                {
                  "name": "Get Group export job status",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const retryDelay = 5000;",
                          "const maxRetries = 20;",
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Group/all pre-request\")",
                          "    return;",
                          "}",
                          "",
                          "var eobJobReq = {",
                          "  url: pm.environment.get(\"smokeTestGroupAllJobUrlv1\"),",
                          "  method: \"GET\",",
                          "  header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
                          "};",
                          "",
                          "function awaitExportJob(retryCount) {",
                          "    pm.sendRequest(eobJobReq, function (err, response) {",
                          "        if (err) {",
                          "            console.error(err);",
                          "        } else if (response.code == 202) {",
                          "            pm.test(\"X-Progress header is Pending or In Progress\", function() {",
                          "               pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
                          "            });",
                          "            if (retryCount < maxRetries) {",
                          "                console.log(\"Group/all export still in progress. Retrying...\");",
                          "                setTimeout(function() {",
                          "                    awaitExportJob(++retryCount);",
                          "                }, retryDelay);",
                          "            } else {",
                          "                console.log(\"Retry limit reached for Group/all job status.\");",
                          "                postman.setNextRequest(null);",
                          "            }",
                          "        } else if (response.code == 200) {",
                          "            console.log(\"Group/all export job complete.\");",
                          "        } else {",
                          "            console.error(\"Unexpected response from Group/all export job: \" + response.status);",
                          "        }",
                          "    });",
                          "}",
                          "",
                          "awaitExportJob(1);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Group/all endpoint request for job status\");",
                          "    ",
                          "    pm.environment.set(\"smokeTestGroupAllDataUrlv1\", \"https://bcda.cms.gov\")",
                          "    return;",
                          "}",
                          "",
                          "pm.test(\"Status code is 202 or 200\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([202, 200]);",
                          "});",
                          "",
                          "if (pm.response.code === 202) {",
                          "    pm.test(\"X-Progress header is Pending or In Progress\", function () {",
                          "        pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
                          "    });",
                          "} else if (pm.response.code === 200) {",
                          "    const schema = {",
                          "        \"properties\": {",
                          "            \"transactionTime\": {",
                          "                \"type\": \"string\"",
                          "            },",
                          "            \"request\": {",
                          "                \"type\": \"string\"",
                          "            },",
                          "            \"requiresAccessToken\": {",
                          "                \"type\": \"boolean\"",
                          "            },",
                          "            \"output\": {",
                          "                \"type\": \"array\"",
                          "            },",
                          "            \"error\": {",
                          "                \"type\": \"array\"",
                          "            }",
                          "        }",
                          "    };",
                          "",
                          "    var respJson = pm.response.json();",
                          "",
                          "    pm.test(\"Schema is valid\", function () {",
                          "        pm.expect(tv4.validate(respJson, schema)).to.be.true;",
                          "    });",
                          "",
                          "    pm.test(\"Contains Required Resources\", () => {",
                          "        const requiredResources = [\"Patient\", \"ExplanationOfBenefit\", \"Coverage\"];",
                          "        const otherResources = [ \"Claim\", \"ClaimResponse\"];",
                          "        const returnedResources = respJson.output.map(r => r.type);",
                          "",
                          "        for (const resource of requiredResources) {",
                          "            pm.expect(returnedResources, resource + \" is required\").to.include(resource);",
                          "        }",
                          "",
                          "        for (const resource of otherResources) {",
                          "            pm.expect(returnedResources, resource + \" resource type should not be returned\").to.not.include(resource);",
                          "        }",
                          "      });",
                          "      ",
                          "    pm.environment.set(\"smokeTestGroupAllDataUrlv1\", respJson.output[0].url);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/fhir+json",
                        "type": "text"
                      },
                      {
                        "key": "Prefer",
                        "value": "respond-async",
                        "type": "text"
                      }
                    ],
                    "url": "{{smokeTestGroupAllJobUrlv1}}"
                  },
                  "response": []
                },
                {
                  "name": "Get Group export job data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "const maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping Group/all endpoint request\");",
                          "    return;",
                          "}",
                          "",
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"Body contains data\", function () {",
                          "    pm.expect(pm.response.length > 0)",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "type": "text",
                        "value": "application/fhir+json"
                      },
                      {
                        "key": "Prefer",
                        "type": "text",
                        "value": "respond-async"
                      }
                    ],
                    "url": "{{smokeTestGroupAllDataUrlv1}}"
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "/runout (EOB Resource)",
              "item": [
                {
                  "name": "Start Group export",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "var maintenanceModeEOYTest = function () {",
                          "    console.log(\"EOY mode is enabled - Expect 500 due to no file attributions found\");",
                          "    pm.test(\"Status code is 500\", function () {",
                          "        pm.response.to.have.status(500);",
                          "    });",
                          "",
                          "    pm.environment.set(\"smokeTestGroupRunoutEOBJobUrl\", \"https://bcda.cms.gov\");",
                          "};",
                          "",
                          "const maintenanceModeTest = function () {",
                          "    pm.test(\"Status code is 202\", function () {",
                          "        pm.response.to.have.status(202);",
                          "    });",
                          "",
                          "    pm.test(\"Has Content-Location header\", function () {",
                          "        pm.response.to.have.header(\"Content-Location\");",
                          "    });",
                          "",
                          "    pm.environment.set(\"smokeTestGroupRunoutEOBJobUrl\", pm.response.headers.get(\"Content-Location\"));",
                          "};",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    maintenanceModeEOYTest();",
                          "} else {",
                          "    maintenanceModeTest();",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/fhir+json",
                        "type": "text"
                      },
                      {
                        "key": "Prefer",
                        "value": "respond-async",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{scheme}}://{{host}}/api/v2/Group/runout/$export?_type=ExplanationOfBenefit",
                      "protocol": "{{scheme}}",
                      "host": ["{{host}}"],
                      "path": ["api", "v2", "Group", "runout", "$export"],
                      "query": [
                        {
                          "key": "_type",
                          "value": "ExplanationOfBenefit"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Group export job status",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    console.log(\"EOY mode is enabled - Skipping due to previous 500, see above test.\");",
                          "    return;",
                          "} else {",
                          "    const retryDelay = 5000;",
                          "    const maxRetries = 20;",
                          "",
                          "    var eobJobReq = {",
                          "      url: pm.environment.get(\"smokeTestGroupRunoutEOBJobUrl\"),",
                          "      method: \"GET\",",
                          "      header: \"Authorization: Bearer \" + pm.environment.get(\"token\")",
                          "    };",
                          "",
                          "    function awaitExportJob(retryCount) {",
                          "        pm.sendRequest(eobJobReq, function (err, response) {",
                          "            if (err) {",
                          "                console.error(err);",
                          "            } else if (response.code == 202) {",
                          "                pm.test(\"X-Progress header is Pending or In Progress\", function() {",
                          "                   pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
                          "                });",
                          "                if (retryCount < maxRetries) {",
                          "                    console.log(\"Group/runout export still in progress. Retrying...\");",
                          "                    setTimeout(function() {",
                          "                        awaitExportJob(++retryCount);",
                          "                    }, retryDelay);",
                          "                } else {",
                          "                    console.log(\"Retry limit reached for Group/runout job status.\");",
                          "                    postman.setNextRequest(null);",
                          "                }",
                          "            } else if (response.code == 200) {",
                          "                console.log(\"Group/runout export job complete.\");",
                          "            } else {",
                          "                console.error(\"Unexpected response from Group/runout export job: \" + response.status);",
                          "            }",
                          "        });",
                          "    }",
                          "}",
                          "",
                          "awaitExportJob(1);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "var maintenanceModeEOYTest = function () {",
                          "    pm.test(\"Status code is 202 or 200\", function () {",
                          "        pm.expect(pm.response.code).to.be.oneOf([202, 200]);",
                          "    });",
                          "",
                          "    if (pm.response.code === 202) {",
                          "        pm.test(\"X-Progress header is Pending or In Progress\", function () {",
                          "            pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(pm.response.headers.get(\"X-Progress\"))).to.be.true;",
                          "        });",
                          "    } else if (pm.response.code === 200) {",
                          "        const schema = {",
                          "            \"properties\": {",
                          "                \"transactionTime\": {",
                          "                    \"type\": \"string\"",
                          "                },",
                          "                \"request\": {",
                          "                    \"type\": \"string\"",
                          "                },",
                          "                \"requiresAccessToken\": {",
                          "                    \"type\": \"boolean\"",
                          "                },",
                          "                \"output\": {",
                          "                    \"type\": \"array\"",
                          "                },",
                          "                \"error\": {",
                          "                    \"type\": \"array\"",
                          "                }",
                          "            }",
                          "        };",
                          "",
                          "        var respJson = pm.response.json();",
                          "",
                          "        pm.test(\"Schema is valid\", function () {",
                          "            pm.expect(tv4.validate(respJson, schema)).to.be.true;",
                          "        });",
                          "",
                          "        pm.test(\"Contains Required Resources\", () => {",
                          "          const requiredResources = [\"ExplanationOfBenefit\"];",
                          "          const otherResources = [\"Patient\", \"Coverage\", \"Claim\", \"ClaimResponse\"];",
                          "          const returnedResources = respJson.output.map(r => r.type);",
                          "",
                          "          for (const resource of requiredResources) {",
                          "              pm.expect(returnedResources, resource + \" is required\").to.include(resource);",
                          "          }",
                          "",
                          "          for (const resource of otherResources) {",
                          "              pm.expect(returnedResources, resource + \" resource type should not be returned\").to.not.include(resource);",
                          "          }",
                          "        });",
                          "",
                          "        pm.environment.set(\"smokeTestGroupRunoutEOBDataUrl\", respJson.output[0].url);",
                          "    }",
                          "};",
                          "",
                          "const maintenanceModeTest = function () {",
                          "    pm.test(\"Status code is 202 or 200\", function () {",
                          "        pm.expect(pm.response.code).to.be.oneOf([202, 200]);",
                          "    });",
                          "",
                          "    if (pm.response.code === 202) {",
                          "        pm.test(\"X-Progress header is Pending or In Progress\", function () {",
                          "            pm.expect(/^(Pending|In Progress \\(\\d{1,3}%\\))$/.test(response.headers.get(\"X-Progress\"))).to.be.true;",
                          "        });",
                          "    } else if (pm.response.code === 200) {",
                          "        const schema = {",
                          "            \"properties\": {",
                          "                \"transactionTime\": {",
                          "                    \"type\": \"string\"",
                          "                },",
                          "                \"request\": {",
                          "                    \"type\": \"string\"",
                          "                },",
                          "                \"requiresAccessToken\": {",
                          "                    \"type\": \"boolean\"",
                          "                },",
                          "                \"output\": {",
                          "                    \"type\": \"array\"",
                          "                },",
                          "                \"error\": {",
                          "                    \"type\": \"array\"",
                          "                }",
                          "            }",
                          "        };",
                          "",
                          "        var respJson = pm.response.json();",
                          "",
                          "        pm.test(\"Schema is valid\", function () {",
                          "            pm.expect(tv4.validate(respJson, schema)).to.be.true;",
                          "        });",
                          "",
                          "        pm.test(\"Contains Required Resources\", () => {",
                          "          const requiredResources = [\"ExplanationOfBenefit\"];",
                          "          const otherResources = [\"Patient\", \"Coverage\", \"Claim\", \"ClaimResponse\"];",
                          "          const returnedResources = respJson.output.map(r => r.type);",
                          "",
                          "          for (const resource of requiredResources) {",
                          "              pm.expect(returnedResources, resource + \" is required\").to.include(resource);",
                          "          }",
                          "",
                          "          for (const resource of otherResources) {",
                          "              pm.expect(returnedResources, resource + \" resource type should not be returned\").to.not.include(resource);",
                          "          }",
                          "        });",
                          "",
                          "        pm.environment.set(\"smokeTestGroupRunoutEOBDataUrl\", respJson.output[0].url);",
                          "    }",
                          "};",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    maintenanceModeEOYTest();",
                          "} else {",
                          "    maintenanceModeTest();",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/fhir+json",
                        "type": "text"
                      },
                      {
                        "key": "Prefer",
                        "value": "respond-async",
                        "type": "text"
                      }
                    ],
                    "url": "{{smokeTestGroupRunoutEOBJobUrl}}"
                  },
                  "response": []
                },
                {
                  "name": "Get Group export job data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var maintenanceMode = pm.globals.get(\"maintenanceMode\");",
                          "",
                          "var maintenanceModeEOYTest = function () {",
                          "    pm.test(\"Status code is 200\", function () {",
                          "        pm.response.to.have.status(200);",
                          "    });",
                          "",
                          "    pm.test(\"Body contains data\", function () {",
                          "        pm.expect(pm.response.length > 0)",
                          "    });",
                          "};",
                          "",
                          "const maintenanceModeTest = function () {",
                          "    pm.test(\"Status code is 200\", function () {",
                          "        pm.response.to.have.status(200);",
                          "    });",
                          "",
                          "    pm.test(\"Body contains data\", function () {",
                          "        pm.expect(pm.response.length > 0)",
                          "    });",
                          "};",
                          "",
                          "if (maintenanceMode === \"eoy\") {",
                          "    maintenanceModeEOYTest();",
                          "} else {",
                          "    maintenanceModeTest();",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "type": "text",
                        "value": "application/fhir+json"
                      },
                      {
                        "key": "Prefer",
                        "type": "text",
                        "value": "respond-async"
                      }
                    ],
                    "url": "{{smokeTestGroupRunoutEOBDataUrl}}"
                  },
                  "response": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
