// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Aco represents a row from 'public.acos'.
type Aco struct {
	ID                int       `json:"id"`                 // id
	Name              string    `json:"name"`               // name
	EncryptedPassword string    `json:"encrypted_password"` // encrypted_password
	CreatedAt         time.Time `json:"created_at"`         // created_at
	UpdatedAt         time.Time `json:"updated_at"`         // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Aco exists in the database.
func (a *Aco) Exists() bool {
	return a._exists
}

// Deleted provides information if the Aco has been deleted from the database.
func (a *Aco) Deleted() bool {
	return a._deleted
}

// Insert inserts the Aco to the database.
func (a *Aco) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.acos (` +
		`name, encrypted_password, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, a.Name, a.EncryptedPassword, a.CreatedAt, a.UpdatedAt)
	err = db.QueryRow(sqlstr, a.Name, a.EncryptedPassword, a.CreatedAt, a.UpdatedAt).Scan(&a.ID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Aco in the database.
func (a *Aco) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.acos SET (` +
		`name, encrypted_password, created_at, updated_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, a.Name, a.EncryptedPassword, a.CreatedAt, a.UpdatedAt, a.ID)
	_, err = db.Exec(sqlstr, a.Name, a.EncryptedPassword, a.CreatedAt, a.UpdatedAt, a.ID)
	return err
}

// Save saves the Aco to the database.
func (a *Aco) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Aco.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Aco) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.acos (` +
		`id, name, encrypted_password, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, encrypted_password, created_at, updated_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.encrypted_password, EXCLUDED.created_at, EXCLUDED.updated_at` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.Name, a.EncryptedPassword, a.CreatedAt, a.UpdatedAt)
	_, err = db.Exec(sqlstr, a.ID, a.Name, a.EncryptedPassword, a.CreatedAt, a.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Aco from the database.
func (a *Aco) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.acos WHERE id = $1`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AcoByID retrieves a row from 'public.acos' as a Aco.
//
// Generated from index 'acos_pkey'.
func AcoByID(db XODB, id int) (*Aco, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, encrypted_password, created_at, updated_at ` +
		`FROM public.acos ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	a := Aco{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Name, &a.EncryptedPassword, &a.CreatedAt, &a.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
