// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/pborman/uuid"
)

// User represents a row from 'public.users'.
type User struct {
	UUID      uuid.UUID `json:"uuid"`       // uuid
	Name      string    `json:"name"`       // name
	Email     string    `json:"email"`      // email
	AcoID     uuid.UUID `json:"aco_id"`     // aco_id
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.users (` +
		`uuid, name, email, aco_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, u.UUID, u.Name, u.Email, u.AcoID, u.CreatedAt, u.UpdatedAt)
	err = db.QueryRow(sqlstr, u.UUID, u.Name, u.Email, u.AcoID, u.CreatedAt, u.UpdatedAt).Scan(&u.UUID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users SET (` +
		`name, email, aco_id, created_at, updated_at` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE uuid = $6`

	// run query
	XOLog(sqlstr, u.Name, u.Email, u.AcoID, u.CreatedAt, u.UpdatedAt, u.UUID)
	_, err = db.Exec(sqlstr, u.Name, u.Email, u.AcoID, u.CreatedAt, u.UpdatedAt, u.UUID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users (` +
		`uuid, name, email, aco_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (uuid) DO UPDATE SET (` +
		`uuid, name, email, aco_id, created_at, updated_at` +
		`) = (` +
		`EXCLUDED.uuid, EXCLUDED.name, EXCLUDED.email, EXCLUDED.aco_id, EXCLUDED.created_at, EXCLUDED.updated_at` +
		`)`

	// run query
	XOLog(sqlstr, u.UUID, u.Name, u.Email, u.AcoID, u.CreatedAt, u.UpdatedAt)
	_, err = db.Exec(sqlstr, u.UUID, u.Name, u.Email, u.AcoID, u.CreatedAt, u.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users WHERE uuid = $1`

	// run query
	XOLog(sqlstr, u.UUID)
	_, err = db.Exec(sqlstr, u.UUID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// Aco returns the Aco associated with the User's AcoID (aco_id).
//
// Generated from foreign key 'users_aco_id_fkey'.
func (u *User) Aco(db XODB) (*Aco, error) {
	return AcoByUUID(db, u.AcoID)
}

// UserByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_email_key'.
func UserByEmail(db XODB, email string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`uuid, name, email, aco_id, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.UUID, &u.Name, &u.Email, &u.AcoID, &u.CreatedAt, &u.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByUUID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByUUID(db XODB, uuid uuid.UUID) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`uuid, name, email, aco_id, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE uuid = $1`

	// run query
	XOLog(sqlstr, uuid)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&u.UUID, &u.Name, &u.Email, &u.AcoID, &u.CreatedAt, &u.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
