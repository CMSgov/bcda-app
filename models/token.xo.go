// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/pborman/uuid"
)

// Token represents a row from 'public.tokens'.
type Token struct {
	ID     int       `json:"id"`      // id
	UserID uuid.UUID `json:"user_id"` // user_id
	Value  string    `json:"value"`   // value
	Active bool      `json:"active"`  // active

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Token exists in the database.
func (t *Token) Exists() bool {
	return t._exists
}

// Deleted provides information if the Token has been deleted from the database.
func (t *Token) Deleted() bool {
	return t._deleted
}

// Insert inserts the Token to the database.
func (t *Token) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.tokens (` +
		`user_id, value, active` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, t.UserID, t.Value, t.Active)
	err = db.QueryRow(sqlstr, t.UserID, t.Value, t.Active).Scan(&t.ID)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Token in the database.
func (t *Token) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.tokens SET (` +
		`user_id, value, active` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, t.UserID, t.Value, t.Active, t.ID)
	_, err = db.Exec(sqlstr, t.UserID, t.Value, t.Active, t.ID)
	return err
}

// Save saves the Token to the database.
func (t *Token) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Token.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Token) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.tokens (` +
		`id, user_id, value, active` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, user_id, value, active` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.user_id, EXCLUDED.value, EXCLUDED.active` +
		`)`

	// run query
	XOLog(sqlstr, t.ID, t.UserID, t.Value, t.Active)
	_, err = db.Exec(sqlstr, t.ID, t.UserID, t.Value, t.Active)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Token from the database.
func (t *Token) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.tokens WHERE id = $1`

	// run query
	XOLog(sqlstr, t.ID)
	_, err = db.Exec(sqlstr, t.ID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// User returns the User associated with the Token's UserID (user_id).
//
// Generated from foreign key 'tokens_user_id_fkey'.
func (t *Token) User(db XODB) (*User, error) {
	return UserByUUID(db, t.UserID)
}

// TokenByID retrieves a row from 'public.tokens' as a Token.
//
// Generated from index 'tokens_pkey'.
func TokenByID(db XODB, id int) (*Token, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, value, active ` +
		`FROM public.tokens ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	t := Token{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&t.ID, &t.UserID, &t.Value, &t.Active)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
