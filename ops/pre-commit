#!/usr/bin/env bash
# A pre-commit hook which:
# 1. checks for secret files being committed as plaintext
# 2. checks if any files need to be gofmt'd

# read list of files containing secrets
IFS=$'\n' read -d '' -r -a secrets < .secrets

# make list of files to be committed by printing out a newline
# separated list of files staged for commit to a temporary file
# and reading it as an array
tmpfile=$(mktemp)
git diff --cached --name-only --diff-filter=ACM > $tmpfile
IFS=$'\n' read -d '' -r -a commits < $tmpfile

# for all files to be committed which are a secret file,
# grep for the header "$ANSIBLE_VAULT;1.1;AES256"
# if it's not there, abort.
for commitFile in ${commits[@]}; do
    for secretFile in ${secrets[@]}; do
        if [ $commitFile == $secretFile ]; then
            header=$(echo "$(git show :./$secretFile)" | grep "\$ANSIBLE_VAULT;1.1;AES256")
            if [ -z $header ]; then
                echo "attempting to commit an unencrypted secret: $secretFile; aborting"
                exit 1
            fi
        fi
    done
done

# the following is based on: 
# https://github.com/golang/go/blob/release-branch.go1.1/misc/git/pre-commit

# if there aren't any added, copied, or modified .go files that are staged for 
# commit, then exit ok.
gofiles=$(grep '.go$' < "$tmpfile")
[ -z "$gofiles" ] && exit 0

# If there aren't any files that are unformatted
unformatted=$(gofmt -l "$gofiles")
if [[ -z "$unformatted" ]]
then
    exit 0
else
    # Some files are not gofmt'd. Print message and fail.
    echo >&2 "Go files must be formatted with gofmt. Please run:"
    for fn in $unformatted; do
    	echo >&2 "  gofmt -w $PWD/$fn"
    done

    exit 1
fi