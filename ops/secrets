#!/usr/bin/env bash
#
# A script to encrypt and decrypt project secrets with ansible vault.
#
# Usage:
# In the root project directory:
#   1. Obtain project password and save as .vault_password
#   2. Encrypt secret files with
#      $ ./ops/secrets --encrypt
#   3. Decrypt secret files with
#      $ ./ops/secrets --decrypt

# menu prints help text
menu(){
    echo "usage: $0 [--decrypt] [--encrypt] [arg]"
    echo ""
    echo "Optional argument taken to specify file or"
    echo "directory. If no arguments provided, default"
    echo "to all directories in .secret_files"
    echo ""
    echo "options:"
    echo "--encrypt  encrypt secret files"
    echo "--decrypt  decrypt secret files"
}

# if no argument is provided
if [ -z $2 ]; then
    # read contents of .secret_files, a text file containing
    # paths to secrets
    IFS=$'\n' read -d '' -r -a secrets < .secrets

# if argument is a directory
elif [ -d $2 ]; then
  # assume we are in an application directory and
  # need to manage files one directory deeper
  secrets=(`ls -d $2/*/* 2> /dev/null`)

# if argument is a file
else
    secrets="$2"
fi

# parse command line arguments
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"


case $key in
    -h|--help)
    menu
    exit 1
    ;;
    --decrypt)
    DECRYPT=true
    shift # past argument
    shift # past value
    ;;
    --encrypt)
    ENCRYPT=true
    shift
    shift
    ;;
    *)
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# if neither decrypt nor encrypt flag provided, print help text and exit
if [[ "$ENCRYPT" != true && "$DECRYPT" != true ]]; then
    menu
    exit 1
fi


# decrypt decrypts a file with the vault password in the root directory
decrypt() {
    echo "=> decrypting $1";
    pwd;
    stat ./.vault_password;
    ls -als ./;
    ansible-vault decrypt $1  --vault-password-file ./.vault_password
}

# encrypt encrypts a file with the vault password in the root directory
encrypt() {
    echo "=> encrypting $1";
    ansible-vault encrypt $1 --vault-password-file ./.vault_password
}

main() {
    if [ "$ENCRYPT" = true ]; then
        export -f encrypt;
        printf %s\\n ${secrets[@]} | xargs -n 1 -P 10 -I {} bash -c 'encrypt "{}"';
    elif [ "$DECRYPT" = true ]; then
        export -f decrypt;
        printf %s\\n ${secrets[@]} | xargs -n 1 -P 10 -I {} bash -c 'decrypt "{}"';
    fi
}

main
