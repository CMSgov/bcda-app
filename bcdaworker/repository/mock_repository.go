// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package repository

import (
	context "context"

	models "github.com/CMSgov/bcda-app/bcda/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/pborman/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateJobKey provides a mock function with given fields: ctx, jobKey
func (_m *MockRepository) CreateJobKey(ctx context.Context, jobKey models.JobKey) error {
	ret := _m.Called(ctx, jobKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.JobKey) error); ok {
		r0 = rf(ctx, jobKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetACOByUUID provides a mock function with given fields: ctx, _a1
func (_m *MockRepository) GetACOByUUID(ctx context.Context, _a1 uuid.UUID) (*models.ACO, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.ACO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ACO); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ACO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCLFBeneficiaryByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetCCLFBeneficiaryByID(ctx context.Context, id uint) (*models.CCLFBeneficiary, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.CCLFBeneficiary
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.CCLFBeneficiary); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CCLFBeneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobByID provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) GetJobByID(ctx context.Context, jobID uint) (*models.Job, error) {
	ret := _m.Called(ctx, jobID)

	var r0 *models.Job
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Job); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobKeyCount provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) GetJobKeyCount(ctx context.Context, jobID uint) (int, error) {
	ret := _m.Called(ctx, jobID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, uint) int); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementCompletedJobCount provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) IncrementCompletedJobCount(ctx context.Context, jobID uint) error {
	ret := _m.Called(ctx, jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJobStatus provides a mock function with given fields: ctx, jobID, new
func (_m *MockRepository) UpdateJobStatus(ctx context.Context, jobID uint, new models.JobStatus) error {
	ret := _m.Called(ctx, jobID, new)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, models.JobStatus) error); ok {
		r0 = rf(ctx, jobID, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJobStatusCheckStatus provides a mock function with given fields: ctx, jobID, current, new
func (_m *MockRepository) UpdateJobStatusCheckStatus(ctx context.Context, jobID uint, current models.JobStatus, new models.JobStatus) error {
	ret := _m.Called(ctx, jobID, current, new)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, models.JobStatus, models.JobStatus) error); ok {
		r0 = rf(ctx, jobID, current, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
