// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	models "github.com/CMSgov/bcda-app/bcda/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/pborman/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateJobKey provides a mock function with given fields: ctx, jobKey
func (_m *MockRepository) CreateJobKey(ctx context.Context, jobKey models.JobKey) error {
	ret := _m.Called(ctx, jobKey)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.JobKey) error); ok {
		r0 = rf(ctx, jobKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJobKeys provides a mock function with given fields: ctx, jobKeys
func (_m *MockRepository) CreateJobKeys(ctx context.Context, jobKeys []models.JobKey) error {
	ret := _m.Called(ctx, jobKeys)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.JobKey) error); ok {
		r0 = rf(ctx, jobKeys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetACOByUUID provides a mock function with given fields: ctx, _a1
func (_m *MockRepository) GetACOByUUID(ctx context.Context, _a1 uuid.UUID) (*models.ACO, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetACOByUUID")
	}

	var r0 *models.ACO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ACO, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ACO); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ACO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCLFBeneficiaryByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetCCLFBeneficiaryByID(ctx context.Context, id uint) (*models.CCLFBeneficiary, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCCLFBeneficiaryByID")
	}

	var r0 *models.CCLFBeneficiary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*models.CCLFBeneficiary, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.CCLFBeneficiary); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CCLFBeneficiary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobByID provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) GetJobByID(ctx context.Context, jobID uint) (*models.Job, error) {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobByID")
	}

	var r0 *models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*models.Job, error)); ok {
		return rf(ctx, jobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Job); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobKey provides a mock function with given fields: ctx, jobID, queJobID
func (_m *MockRepository) GetJobKey(ctx context.Context, jobID uint, queJobID int64) (*models.JobKey, error) {
	ret := _m.Called(ctx, jobID, queJobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobKey")
	}

	var r0 *models.JobKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, int64) (*models.JobKey, error)); ok {
		return rf(ctx, jobID, queJobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, int64) *models.JobKey); ok {
		r0 = rf(ctx, jobID, queJobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, int64) error); ok {
		r1 = rf(ctx, jobID, queJobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobKeyCount provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) GetJobKeyCount(ctx context.Context, jobID uint) (int, error) {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobKeyCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (int, error)); ok {
		return rf(ctx, jobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) int); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobStatus provides a mock function with given fields: ctx, jobID, new
func (_m *MockRepository) UpdateJobStatus(ctx context.Context, jobID uint, new models.JobStatus) error {
	ret := _m.Called(ctx, jobID, new)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, models.JobStatus) error); ok {
		r0 = rf(ctx, jobID, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJobStatusCheckStatus provides a mock function with given fields: ctx, jobID, current, new
func (_m *MockRepository) UpdateJobStatusCheckStatus(ctx context.Context, jobID uint, current models.JobStatus, new models.JobStatus) error {
	ret := _m.Called(ctx, jobID, current, new)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatusCheckStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, models.JobStatus, models.JobStatus) error); ok {
		r0 = rf(ctx, jobID, current, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
