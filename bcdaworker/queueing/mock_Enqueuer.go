// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package queueing

import (
	"context"

	"github.com/CMSgov/bcda-app/bcda/models"
	"github.com/CMSgov/bcda-app/bcdaworker/queueing/worker_types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEnqueuer creates a new instance of MockEnqueuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnqueuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnqueuer {
	mock := &MockEnqueuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnqueuer is an autogenerated mock type for the Enqueuer type
type MockEnqueuer struct {
	mock.Mock
}

type MockEnqueuer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnqueuer) EXPECT() *MockEnqueuer_Expecter {
	return &MockEnqueuer_Expecter{mock: &_m.Mock}
}

// AddAlrJob provides a mock function for the type MockEnqueuer
func (_mock *MockEnqueuer) AddAlrJob(job models.JobAlrEnqueueArgs, priority int) error {
	ret := _mock.Called(job, priority)

	if len(ret) == 0 {
		panic("no return value specified for AddAlrJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.JobAlrEnqueueArgs, int) error); ok {
		r0 = returnFunc(job, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnqueuer_AddAlrJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAlrJob'
type MockEnqueuer_AddAlrJob_Call struct {
	*mock.Call
}

// AddAlrJob is a helper method to define mock.On call
//   - job
//   - priority
func (_e *MockEnqueuer_Expecter) AddAlrJob(job interface{}, priority interface{}) *MockEnqueuer_AddAlrJob_Call {
	return &MockEnqueuer_AddAlrJob_Call{Call: _e.mock.On("AddAlrJob", job, priority)}
}

func (_c *MockEnqueuer_AddAlrJob_Call) Run(run func(job models.JobAlrEnqueueArgs, priority int)) *MockEnqueuer_AddAlrJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.JobAlrEnqueueArgs), args[1].(int))
	})
	return _c
}

func (_c *MockEnqueuer_AddAlrJob_Call) Return(err error) *MockEnqueuer_AddAlrJob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnqueuer_AddAlrJob_Call) RunAndReturn(run func(job models.JobAlrEnqueueArgs, priority int) error) *MockEnqueuer_AddAlrJob_Call {
	_c.Call.Return(run)
	return _c
}

// AddJob provides a mock function for the type MockEnqueuer
func (_mock *MockEnqueuer) AddJob(ctx context.Context, job worker_types.JobEnqueueArgs, priority int) error {
	ret := _mock.Called(ctx, job, priority)

	if len(ret) == 0 {
		panic("no return value specified for AddJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, worker_types.JobEnqueueArgs, int) error); ok {
		r0 = returnFunc(ctx, job, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnqueuer_AddJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddJob'
type MockEnqueuer_AddJob_Call struct {
	*mock.Call
}

// AddJob is a helper method to define mock.On call
//   - ctx
//   - job
//   - priority
func (_e *MockEnqueuer_Expecter) AddJob(ctx interface{}, job interface{}, priority interface{}) *MockEnqueuer_AddJob_Call {
	return &MockEnqueuer_AddJob_Call{Call: _e.mock.On("AddJob", ctx, job, priority)}
}

func (_c *MockEnqueuer_AddJob_Call) Run(run func(ctx context.Context, job worker_types.JobEnqueueArgs, priority int)) *MockEnqueuer_AddJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(worker_types.JobEnqueueArgs), args[2].(int))
	})
	return _c
}

func (_c *MockEnqueuer_AddJob_Call) Return(err error) *MockEnqueuer_AddJob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnqueuer_AddJob_Call) RunAndReturn(run func(ctx context.Context, job worker_types.JobEnqueueArgs, priority int) error) *MockEnqueuer_AddJob_Call {
	_c.Call.Return(run)
	return _c
}

// AddPrepareJob provides a mock function for the type MockEnqueuer
func (_mock *MockEnqueuer) AddPrepareJob(ctx context.Context, job worker_types.PrepareJobArgs) error {
	ret := _mock.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for AddPrepareJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, worker_types.PrepareJobArgs) error); ok {
		r0 = returnFunc(ctx, job)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnqueuer_AddPrepareJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPrepareJob'
type MockEnqueuer_AddPrepareJob_Call struct {
	*mock.Call
}

// AddPrepareJob is a helper method to define mock.On call
//   - ctx
//   - job
func (_e *MockEnqueuer_Expecter) AddPrepareJob(ctx interface{}, job interface{}) *MockEnqueuer_AddPrepareJob_Call {
	return &MockEnqueuer_AddPrepareJob_Call{Call: _e.mock.On("AddPrepareJob", ctx, job)}
}

func (_c *MockEnqueuer_AddPrepareJob_Call) Run(run func(ctx context.Context, job worker_types.PrepareJobArgs)) *MockEnqueuer_AddPrepareJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(worker_types.PrepareJobArgs))
	})
	return _c
}

func (_c *MockEnqueuer_AddPrepareJob_Call) Return(err error) *MockEnqueuer_AddPrepareJob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnqueuer_AddPrepareJob_Call) RunAndReturn(run func(ctx context.Context, job worker_types.PrepareJobArgs) error) *MockEnqueuer_AddPrepareJob_Call {
	_c.Call.Return(run)
	return _c
}
