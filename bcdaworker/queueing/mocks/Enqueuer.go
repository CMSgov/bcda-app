// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/CMSgov/bcda-app/bcda/models"
	mock "github.com/stretchr/testify/mock"
)

// Enqueuer is an autogenerated mock type for the Enqueuer type
type Enqueuer struct {
	mock.Mock
}

// AddAlrJob provides a mock function with given fields: job, priority
func (_m *Enqueuer) AddAlrJob(job models.JobAlrEnqueueArgs, priority int) error {
	ret := _m.Called(job, priority)

	if len(ret) == 0 {
		panic("no return value specified for AddAlrJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.JobAlrEnqueueArgs, int) error); ok {
		r0 = rf(job, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddJob provides a mock function with given fields: ctx, job, priority
func (_m *Enqueuer) AddJob(ctx context.Context, job models.JobEnqueueArgs, priority int) error {
	ret := _m.Called(ctx, job, priority)

	if len(ret) == 0 {
		panic("no return value specified for AddJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.JobEnqueueArgs, int) error); ok {
		r0 = rf(ctx, job, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEnqueuer creates a new instance of Enqueuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnqueuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Enqueuer {
	mock := &Enqueuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
