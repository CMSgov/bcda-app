// Code generated by mockery v2.43.2. DO NOT EDIT.

package worker

import (
	context "context"

	models "github.com/CMSgov/bcda-app/bcda/models"
	mock "github.com/stretchr/testify/mock"
)

// MockWorker is an autogenerated mock type for the Worker type
type MockWorker struct {
	mock.Mock
}

// ProcessJob provides a mock function with given fields: ctx, queJobID, job, jobArgs
func (_m *MockWorker) ProcessJob(ctx context.Context, queJobID int64, job models.Job, jobArgs models.JobEnqueueArgs) error {
	ret := _m.Called(ctx, queJobID, job, jobArgs)

	if len(ret) == 0 {
		panic("no return value specified for ProcessJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, models.Job, models.JobEnqueueArgs) error); ok {
		r0 = rf(ctx, queJobID, job, jobArgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateJob provides a mock function with given fields: ctx, queJobID, jobArgs
func (_m *MockWorker) ValidateJob(ctx context.Context, queJobID int64, jobArgs models.JobEnqueueArgs) (*models.Job, error) {
	ret := _m.Called(ctx, queJobID, jobArgs)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJob")
	}

	var r0 *models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, models.JobEnqueueArgs) (*models.Job, error)); ok {
		return rf(ctx, queJobID, jobArgs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, models.JobEnqueueArgs) *models.Job); ok {
		r0 = rf(ctx, queJobID, jobArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, models.JobEnqueueArgs) error); ok {
		r1 = rf(ctx, queJobID, jobArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWorker creates a new instance of MockWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorker {
	mock := &MockWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
