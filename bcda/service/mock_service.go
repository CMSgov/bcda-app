// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"
	"time"

	"github.com/CMSgov/bcda-app/bcda/models"
	"github.com/CMSgov/bcda-app/bcdaworker/queueing/worker_types"
	"github.com/pborman/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CancelJob provides a mock function for the type MockService
func (_mock *MockService) CancelJob(ctx context.Context, jobID uint) (uint, error) {
	ret := _mock.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for CancelJob")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) (uint, error)); ok {
		return returnFunc(ctx, jobID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) uint); ok {
		r0 = returnFunc(ctx, jobID)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = returnFunc(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_CancelJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelJob'
type MockService_CancelJob_Call struct {
	*mock.Call
}

// CancelJob is a helper method to define mock.On call
//   - ctx
//   - jobID
func (_e *MockService_Expecter) CancelJob(ctx interface{}, jobID interface{}) *MockService_CancelJob_Call {
	return &MockService_CancelJob_Call{Call: _e.mock.On("CancelJob", ctx, jobID)}
}

func (_c *MockService_CancelJob_Call) Run(run func(ctx context.Context, jobID uint)) *MockService_CancelJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockService_CancelJob_Call) Return(v uint, err error) *MockService_CancelJob_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockService_CancelJob_Call) RunAndReturn(run func(ctx context.Context, jobID uint) (uint, error)) *MockService_CancelJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetACOConfigForID provides a mock function for the type MockService
func (_mock *MockService) GetACOConfigForID(cmsID string) (*ACOConfig, bool) {
	ret := _mock.Called(cmsID)

	if len(ret) == 0 {
		panic("no return value specified for GetACOConfigForID")
	}

	var r0 *ACOConfig
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (*ACOConfig, bool)); ok {
		return returnFunc(cmsID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *ACOConfig); ok {
		r0 = returnFunc(cmsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ACOConfig)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(cmsID)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockService_GetACOConfigForID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetACOConfigForID'
type MockService_GetACOConfigForID_Call struct {
	*mock.Call
}

// GetACOConfigForID is a helper method to define mock.On call
//   - cmsID
func (_e *MockService_Expecter) GetACOConfigForID(cmsID interface{}) *MockService_GetACOConfigForID_Call {
	return &MockService_GetACOConfigForID_Call{Call: _e.mock.On("GetACOConfigForID", cmsID)}
}

func (_c *MockService_GetACOConfigForID_Call) Run(run func(cmsID string)) *MockService_GetACOConfigForID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_GetACOConfigForID_Call) Return(aCOConfig *ACOConfig, b bool) *MockService_GetACOConfigForID_Call {
	_c.Call.Return(aCOConfig, b)
	return _c
}

func (_c *MockService_GetACOConfigForID_Call) RunAndReturn(run func(cmsID string) (*ACOConfig, bool)) *MockService_GetACOConfigForID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlrJobs provides a mock function for the type MockService
func (_mock *MockService) GetAlrJobs(ctx context.Context, alrMBI *models.AlrMBIs) []*models.JobAlrEnqueueArgs {
	ret := _mock.Called(ctx, alrMBI)

	if len(ret) == 0 {
		panic("no return value specified for GetAlrJobs")
	}

	var r0 []*models.JobAlrEnqueueArgs
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.AlrMBIs) []*models.JobAlrEnqueueArgs); ok {
		r0 = returnFunc(ctx, alrMBI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobAlrEnqueueArgs)
		}
	}
	return r0
}

// MockService_GetAlrJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlrJobs'
type MockService_GetAlrJobs_Call struct {
	*mock.Call
}

// GetAlrJobs is a helper method to define mock.On call
//   - ctx
//   - alrMBI
func (_e *MockService_Expecter) GetAlrJobs(ctx interface{}, alrMBI interface{}) *MockService_GetAlrJobs_Call {
	return &MockService_GetAlrJobs_Call{Call: _e.mock.On("GetAlrJobs", ctx, alrMBI)}
}

func (_c *MockService_GetAlrJobs_Call) Run(run func(ctx context.Context, alrMBI *models.AlrMBIs)) *MockService_GetAlrJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.AlrMBIs))
	})
	return _c
}

func (_c *MockService_GetAlrJobs_Call) Return(jobAlrEnqueueArgss []*models.JobAlrEnqueueArgs) *MockService_GetAlrJobs_Call {
	_c.Call.Return(jobAlrEnqueueArgss)
	return _c
}

func (_c *MockService_GetAlrJobs_Call) RunAndReturn(run func(ctx context.Context, alrMBI *models.AlrMBIs) []*models.JobAlrEnqueueArgs) *MockService_GetAlrJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobAndKeys provides a mock function for the type MockService
func (_mock *MockService) GetJobAndKeys(ctx context.Context, jobID uint) (*models.Job, []*models.JobKey, error) {
	ret := _mock.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobAndKeys")
	}

	var r0 *models.Job
	var r1 []*models.JobKey
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) (*models.Job, []*models.JobKey, error)); ok {
		return returnFunc(ctx, jobID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint) *models.Job); ok {
		r0 = returnFunc(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint) []*models.JobKey); ok {
		r1 = returnFunc(ctx, jobID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*models.JobKey)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, uint) error); ok {
		r2 = returnFunc(ctx, jobID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockService_GetJobAndKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobAndKeys'
type MockService_GetJobAndKeys_Call struct {
	*mock.Call
}

// GetJobAndKeys is a helper method to define mock.On call
//   - ctx
//   - jobID
func (_e *MockService_Expecter) GetJobAndKeys(ctx interface{}, jobID interface{}) *MockService_GetJobAndKeys_Call {
	return &MockService_GetJobAndKeys_Call{Call: _e.mock.On("GetJobAndKeys", ctx, jobID)}
}

func (_c *MockService_GetJobAndKeys_Call) Run(run func(ctx context.Context, jobID uint)) *MockService_GetJobAndKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockService_GetJobAndKeys_Call) Return(job *models.Job, jobKeys []*models.JobKey, err error) *MockService_GetJobAndKeys_Call {
	_c.Call.Return(job, jobKeys, err)
	return _c
}

func (_c *MockService_GetJobAndKeys_Call) RunAndReturn(run func(ctx context.Context, jobID uint) (*models.Job, []*models.JobKey, error)) *MockService_GetJobAndKeys_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobKey provides a mock function for the type MockService
func (_mock *MockService) GetJobKey(ctx context.Context, jobID uint, filename string) (*models.JobKey, error) {
	ret := _mock.Called(ctx, jobID, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetJobKey")
	}

	var r0 *models.JobKey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint, string) (*models.JobKey, error)); ok {
		return returnFunc(ctx, jobID, filename)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint, string) *models.JobKey); ok {
		r0 = returnFunc(ctx, jobID, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = returnFunc(ctx, jobID, filename)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetJobKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobKey'
type MockService_GetJobKey_Call struct {
	*mock.Call
}

// GetJobKey is a helper method to define mock.On call
//   - ctx
//   - jobID
//   - filename
func (_e *MockService_Expecter) GetJobKey(ctx interface{}, jobID interface{}, filename interface{}) *MockService_GetJobKey_Call {
	return &MockService_GetJobKey_Call{Call: _e.mock.On("GetJobKey", ctx, jobID, filename)}
}

func (_c *MockService_GetJobKey_Call) Run(run func(ctx context.Context, jobID uint, filename string)) *MockService_GetJobKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(string))
	})
	return _c
}

func (_c *MockService_GetJobKey_Call) Return(jobKey *models.JobKey, err error) *MockService_GetJobKey_Call {
	_c.Call.Return(jobKey, err)
	return _c
}

func (_c *MockService_GetJobKey_Call) RunAndReturn(run func(ctx context.Context, jobID uint, filename string) (*models.JobKey, error)) *MockService_GetJobKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobPriority provides a mock function for the type MockService
func (_mock *MockService) GetJobPriority(acoID string, resourceType string, sinceParam bool) int16 {
	ret := _mock.Called(acoID, resourceType, sinceParam)

	if len(ret) == 0 {
		panic("no return value specified for GetJobPriority")
	}

	var r0 int16
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) int16); ok {
		r0 = returnFunc(acoID, resourceType, sinceParam)
	} else {
		r0 = ret.Get(0).(int16)
	}
	return r0
}

// MockService_GetJobPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobPriority'
type MockService_GetJobPriority_Call struct {
	*mock.Call
}

// GetJobPriority is a helper method to define mock.On call
//   - acoID
//   - resourceType
//   - sinceParam
func (_e *MockService_Expecter) GetJobPriority(acoID interface{}, resourceType interface{}, sinceParam interface{}) *MockService_GetJobPriority_Call {
	return &MockService_GetJobPriority_Call{Call: _e.mock.On("GetJobPriority", acoID, resourceType, sinceParam)}
}

func (_c *MockService_GetJobPriority_Call) Run(run func(acoID string, resourceType string, sinceParam bool)) *MockService_GetJobPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockService_GetJobPriority_Call) Return(n int16) *MockService_GetJobPriority_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockService_GetJobPriority_Call) RunAndReturn(run func(acoID string, resourceType string, sinceParam bool) int16) *MockService_GetJobPriority_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobs provides a mock function for the type MockService
func (_mock *MockService) GetJobs(ctx context.Context, acoID uuid.UUID, statuses ...models.JobStatus) ([]*models.Job, error) {
	var tmpRet mock.Arguments
	if len(statuses) > 0 {
		tmpRet = _mock.Called(ctx, acoID, statuses)
	} else {
		tmpRet = _mock.Called(ctx, acoID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJobs")
	}

	var r0 []*models.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...models.JobStatus) ([]*models.Job, error)); ok {
		return returnFunc(ctx, acoID, statuses...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...models.JobStatus) []*models.Job); ok {
		r0 = returnFunc(ctx, acoID, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...models.JobStatus) error); ok {
		r1 = returnFunc(ctx, acoID, statuses...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobs'
type MockService_GetJobs_Call struct {
	*mock.Call
}

// GetJobs is a helper method to define mock.On call
//   - ctx
//   - acoID
//   - statuses
func (_e *MockService_Expecter) GetJobs(ctx interface{}, acoID interface{}, statuses ...interface{}) *MockService_GetJobs_Call {
	return &MockService_GetJobs_Call{Call: _e.mock.On("GetJobs",
		append([]interface{}{ctx, acoID}, statuses...)...)}
}

func (_c *MockService_GetJobs_Call) Run(run func(ctx context.Context, acoID uuid.UUID, statuses ...models.JobStatus)) *MockService_GetJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]models.JobStatus)
		run(args[0].(context.Context), args[1].(uuid.UUID), variadicArgs...)
	})
	return _c
}

func (_c *MockService_GetJobs_Call) Return(jobs []*models.Job, err error) *MockService_GetJobs_Call {
	_c.Call.Return(jobs, err)
	return _c
}

func (_c *MockService_GetJobs_Call) RunAndReturn(run func(ctx context.Context, acoID uuid.UUID, statuses ...models.JobStatus) ([]*models.Job, error)) *MockService_GetJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestCCLFFile provides a mock function for the type MockService
func (_mock *MockService) GetLatestCCLFFile(ctx context.Context, cmsID string, lowerBound time.Time, upperBound time.Time, fileType models.CCLFFileType) (*models.CCLFFile, error) {
	ret := _mock.Called(ctx, cmsID, lowerBound, upperBound, fileType)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCCLFFile")
	}

	var r0 *models.CCLFFile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time, models.CCLFFileType) (*models.CCLFFile, error)); ok {
		return returnFunc(ctx, cmsID, lowerBound, upperBound, fileType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time, models.CCLFFileType) *models.CCLFFile); ok {
		r0 = returnFunc(ctx, cmsID, lowerBound, upperBound, fileType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CCLFFile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time, models.CCLFFileType) error); ok {
		r1 = returnFunc(ctx, cmsID, lowerBound, upperBound, fileType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetLatestCCLFFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestCCLFFile'
type MockService_GetLatestCCLFFile_Call struct {
	*mock.Call
}

// GetLatestCCLFFile is a helper method to define mock.On call
//   - ctx
//   - cmsID
//   - lowerBound
//   - upperBound
//   - fileType
func (_e *MockService_Expecter) GetLatestCCLFFile(ctx interface{}, cmsID interface{}, lowerBound interface{}, upperBound interface{}, fileType interface{}) *MockService_GetLatestCCLFFile_Call {
	return &MockService_GetLatestCCLFFile_Call{Call: _e.mock.On("GetLatestCCLFFile", ctx, cmsID, lowerBound, upperBound, fileType)}
}

func (_c *MockService_GetLatestCCLFFile_Call) Run(run func(ctx context.Context, cmsID string, lowerBound time.Time, upperBound time.Time, fileType models.CCLFFileType)) *MockService_GetLatestCCLFFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(time.Time), args[4].(models.CCLFFileType))
	})
	return _c
}

func (_c *MockService_GetLatestCCLFFile_Call) Return(cCLFFile *models.CCLFFile, err error) *MockService_GetLatestCCLFFile_Call {
	_c.Call.Return(cCLFFile, err)
	return _c
}

func (_c *MockService_GetLatestCCLFFile_Call) RunAndReturn(run func(ctx context.Context, cmsID string, lowerBound time.Time, upperBound time.Time, fileType models.CCLFFileType) (*models.CCLFFile, error)) *MockService_GetLatestCCLFFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueJobs provides a mock function for the type MockService
func (_mock *MockService) GetQueJobs(ctx context.Context, args worker_types.PrepareJobArgs) ([]*models.JobEnqueueArgs, error) {
	ret := _mock.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetQueJobs")
	}

	var r0 []*models.JobEnqueueArgs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, worker_types.PrepareJobArgs) ([]*models.JobEnqueueArgs, error)); ok {
		return returnFunc(ctx, args)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, worker_types.PrepareJobArgs) []*models.JobEnqueueArgs); ok {
		r0 = returnFunc(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobEnqueueArgs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, worker_types.PrepareJobArgs) error); ok {
		r1 = returnFunc(ctx, args)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetQueJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueJobs'
type MockService_GetQueJobs_Call struct {
	*mock.Call
}

// GetQueJobs is a helper method to define mock.On call
//   - ctx
//   - args
func (_e *MockService_Expecter) GetQueJobs(ctx interface{}, args interface{}) *MockService_GetQueJobs_Call {
	return &MockService_GetQueJobs_Call{Call: _e.mock.On("GetQueJobs", ctx, args)}
}

func (_c *MockService_GetQueJobs_Call) Run(run func(ctx context.Context, args worker_types.PrepareJobArgs)) *MockService_GetQueJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(worker_types.PrepareJobArgs))
	})
	return _c
}

func (_c *MockService_GetQueJobs_Call) Return(queJobs []*models.JobEnqueueArgs, err error) *MockService_GetQueJobs_Call {
	_c.Call.Return(queJobs, err)
	return _c
}

func (_c *MockService_GetQueJobs_Call) RunAndReturn(run func(ctx context.Context, args worker_types.PrepareJobArgs) ([]*models.JobEnqueueArgs, error)) *MockService_GetQueJobs_Call {
	_c.Call.Return(run)
	return _c
}

// SetTimeConstraints provides a mock function for the type MockService
func (_mock *MockService) SetTimeConstraints(ctx context.Context, cmsID string) (TimeConstraints, error) {
	ret := _mock.Called(ctx, cmsID)

	if len(ret) == 0 {
		panic("no return value specified for SetTimeConstraints")
	}

	var r0 TimeConstraints
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (TimeConstraints, error)); ok {
		return returnFunc(ctx, cmsID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) TimeConstraints); ok {
		r0 = returnFunc(ctx, cmsID)
	} else {
		r0 = ret.Get(0).(TimeConstraints)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, cmsID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_SetTimeConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeConstraints'
type MockService_SetTimeConstraints_Call struct {
	*mock.Call
}

// SetTimeConstraints is a helper method to define mock.On call
//   - ctx
//   - cmsID
func (_e *MockService_Expecter) SetTimeConstraints(ctx interface{}, cmsID interface{}) *MockService_SetTimeConstraints_Call {
	return &MockService_SetTimeConstraints_Call{Call: _e.mock.On("SetTimeConstraints", ctx, cmsID)}
}

func (_c *MockService_SetTimeConstraints_Call) Run(run func(ctx context.Context, cmsID string)) *MockService_SetTimeConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_SetTimeConstraints_Call) Return(timeConstraints TimeConstraints, err error) *MockService_SetTimeConstraints_Call {
	_c.Call.Return(timeConstraints, err)
	return _c
}

func (_c *MockService_SetTimeConstraints_Call) RunAndReturn(run func(ctx context.Context, cmsID string) (TimeConstraints, error)) *MockService_SetTimeConstraints_Call {
	_c.Call.Return(run)
	return _c
}
