// Code generated by mockery 2.7.4. DO NOT EDIT.

package service

import (
	context "context"

	models "github.com/CMSgov/bcda-app/bcda/models"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CancelJob provides a mock function with given fields: ctx, jobID
func (_m *MockService) CancelJob(ctx context.Context, jobID uint) (uint, error) {
	ret := _m.Called(ctx, jobID)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, uint) uint); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlrJobs provides a mock function with given fields: ctx, cmsID, reqType, window
func (_m *MockService) GetAlrJobs(ctx context.Context, cmsID string, reqType AlrRequestType, window AlrRequestWindow) ([]*models.JobAlrEnqueueArgs, error) {
	ret := _m.Called(ctx, cmsID, reqType, window)

	var r0 []*models.JobAlrEnqueueArgs
	if rf, ok := ret.Get(0).(func(context.Context, string, AlrRequestType, AlrRequestWindow) []*models.JobAlrEnqueueArgs); ok {
		r0 = rf(ctx, cmsID, reqType, window)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobAlrEnqueueArgs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, AlrRequestType, AlrRequestWindow) error); ok {
		r1 = rf(ctx, cmsID, reqType, window)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobAndKeys provides a mock function with given fields: ctx, jobID
func (_m *MockService) GetJobAndKeys(ctx context.Context, jobID uint) (*models.Job, []*models.JobKey, error) {
	ret := _m.Called(ctx, jobID)

	var r0 *models.Job
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Job); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	var r1 []*models.JobKey
	if rf, ok := ret.Get(1).(func(context.Context, uint) []*models.JobKey); ok {
		r1 = rf(ctx, jobID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*models.JobKey)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uint) error); ok {
		r2 = rf(ctx, jobID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetJobPriority provides a mock function with given fields: acoID, resourceType, sinceParam
func (_m *MockService) GetJobPriority(acoID string, resourceType string, sinceParam bool) int16 {
	ret := _m.Called(acoID, resourceType, sinceParam)

	var r0 int16
	if rf, ok := ret.Get(0).(func(string, string, bool) int16); ok {
		r0 = rf(acoID, resourceType, sinceParam)
	} else {
		r0 = ret.Get(0).(int16)
	}

	return r0
}

// GetLatestCCLFFile provides a mock function with given fields: ctx, cmsID, fileType
func (_m *MockService) GetLatestCCLFFile(ctx context.Context, cmsID string, fileType models.CCLFFileType) (*models.CCLFFile, error) {
	ret := _m.Called(ctx, cmsID, fileType)

	var r0 *models.CCLFFile
	if rf, ok := ret.Get(0).(func(context.Context, string, models.CCLFFileType) *models.CCLFFile); ok {
		r0 = rf(ctx, cmsID, fileType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CCLFFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, models.CCLFFileType) error); ok {
		r1 = rf(ctx, cmsID, fileType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueJobs provides a mock function with given fields: ctx, conditions
func (_m *MockService) GetQueJobs(ctx context.Context, conditions RequestConditions) ([]*models.JobEnqueueArgs, error) {
	ret := _m.Called(ctx, conditions)

	var r0 []*models.JobEnqueueArgs
	if rf, ok := ret.Get(0).(func(context.Context, RequestConditions) []*models.JobEnqueueArgs); ok {
		r0 = rf(ctx, conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobEnqueueArgs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, RequestConditions) error); ok {
		r1 = rf(ctx, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *MockService) GetACOConfigForID(cmsID string) (*ACOConfig, bool) {
	ret := _m.Called(cmsID)

	var r0 *ACOConfig
	if rf, ok := ret.Get(0).(func(string) *ACOConfig); ok {
		r0 = rf(cmsID)
	} else {
		r0 = ret.Get(0).(*ACOConfig)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(cmsID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}
