// Code generated by mockery 2.9.0. DO NOT EDIT.

package models

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/pborman/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateACO provides a mock function with given fields: ctx, aco
func (_m *MockRepository) CreateACO(ctx context.Context, aco ACO) error {
	ret := _m.Called(ctx, aco)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ACO) error); ok {
		r0 = rf(ctx, aco)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCCLFFile provides a mock function with given fields: ctx, cclfFile
func (_m *MockRepository) CreateCCLFFile(ctx context.Context, cclfFile CCLFFile) (uint, error) {
	ret := _m.Called(ctx, cclfFile)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, CCLFFile) uint); ok {
		r0 = rf(ctx, cclfFile)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, CCLFFile) error); ok {
		r1 = rf(ctx, cclfFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: ctx, j
func (_m *MockRepository) CreateJob(ctx context.Context, j Job) (uint, error) {
	ret := _m.Called(ctx, j)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, Job) uint); ok {
		r0 = rf(ctx, j)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Job) error); ok {
		r1 = rf(ctx, j)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSuppression provides a mock function with given fields: ctx, suppression
func (_m *MockRepository) CreateSuppression(ctx context.Context, suppression Suppression) error {
	ret := _m.Called(ctx, suppression)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Suppression) error); ok {
		r0 = rf(ctx, suppression)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSuppressionFile provides a mock function with given fields: ctx, suppressionFile
func (_m *MockRepository) CreateSuppressionFile(ctx context.Context, suppressionFile SuppressionFile) (uint, error) {
	ret := _m.Called(ctx, suppressionFile)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, SuppressionFile) uint); ok {
		r0 = rf(ctx, suppressionFile)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, SuppressionFile) error); ok {
		r1 = rf(ctx, suppressionFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetACOByCMSID provides a mock function with given fields: ctx, cmsID
func (_m *MockRepository) GetACOByCMSID(ctx context.Context, cmsID string) (*ACO, error) {
	ret := _m.Called(ctx, cmsID)

	var r0 *ACO
	if rf, ok := ret.Get(0).(func(context.Context, string) *ACO); ok {
		r0 = rf(ctx, cmsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ACO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cmsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetACOByClientID provides a mock function with given fields: ctx, clientID
func (_m *MockRepository) GetACOByClientID(ctx context.Context, clientID string) (*ACO, error) {
	ret := _m.Called(ctx, clientID)

	var r0 *ACO
	if rf, ok := ret.Get(0).(func(context.Context, string) *ACO); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ACO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetACOByUUID provides a mock function with given fields: ctx, _a1
func (_m *MockRepository) GetACOByUUID(ctx context.Context, _a1 uuid.UUID) (*ACO, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *ACO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ACO); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ACO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlrMBIs provides a mock function with given fields: ctx, cmsID
func (_m *MockRepository) GetAlrMBIs(ctx context.Context, cmsID string) (*AlrMBIs, error) {
	ret := _m.Called(ctx, cmsID)

	var r0 *AlrMBIs
	if rf, ok := ret.Get(0).(func(context.Context, string) *AlrMBIs); ok {
		r0 = rf(ctx, cmsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AlrMBIs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cmsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCLFBeneficiaries provides a mock function with given fields: ctx, cclfFileID, ignoredMBIs
func (_m *MockRepository) GetCCLFBeneficiaries(ctx context.Context, cclfFileID uint, ignoredMBIs []string) ([]*CCLFBeneficiary, error) {
	ret := _m.Called(ctx, cclfFileID, ignoredMBIs)

	var r0 []*CCLFBeneficiary
	if rf, ok := ret.Get(0).(func(context.Context, uint, []string) []*CCLFBeneficiary); ok {
		r0 = rf(ctx, cclfFileID, ignoredMBIs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*CCLFBeneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, []string) error); ok {
		r1 = rf(ctx, cclfFileID, ignoredMBIs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCLFBeneficiaryMBIs provides a mock function with given fields: ctx, cclfFileID
func (_m *MockRepository) GetCCLFBeneficiaryMBIs(ctx context.Context, cclfFileID uint) ([]string, error) {
	ret := _m.Called(ctx, cclfFileID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, uint) []string); ok {
		r0 = rf(ctx, cclfFileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, cclfFileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCLFFileExistsByName provides a mock function with given fields: ctx, name
func (_m *MockRepository) GetCCLFFileExistsByName(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobByID provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) GetJobByID(ctx context.Context, jobID uint) (*Job, error) {
	ret := _m.Called(ctx, jobID)

	var r0 *Job
	if rf, ok := ret.Get(0).(func(context.Context, uint) *Job); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobKeys provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) GetJobKeys(ctx context.Context, jobID uint) ([]*JobKey, error) {
	ret := _m.Called(ctx, jobID)

	var r0 []*JobKey
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*JobKey); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*JobKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobs provides a mock function with given fields: ctx, acoID, statuses
func (_m *MockRepository) GetJobs(ctx context.Context, acoID uuid.UUID, statuses ...JobStatus) ([]*Job, error) {
	_va := make([]interface{}, len(statuses))
	for _i := range statuses {
		_va[_i] = statuses[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, acoID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*Job
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...JobStatus) []*Job); ok {
		r0 = rf(ctx, acoID, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...JobStatus) error); ok {
		r1 = rf(ctx, acoID, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobsByUpdateTimeAndStatus provides a mock function with given fields: ctx, lowerBound, upperBound, statuses
func (_m *MockRepository) GetJobsByUpdateTimeAndStatus(ctx context.Context, lowerBound time.Time, upperBound time.Time, statuses ...JobStatus) ([]*Job, error) {
	_va := make([]interface{}, len(statuses))
	for _i := range statuses {
		_va[_i] = statuses[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, lowerBound, upperBound)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*Job
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, ...JobStatus) []*Job); ok {
		r0 = rf(ctx, lowerBound, upperBound, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, ...JobStatus) error); ok {
		r1 = rf(ctx, lowerBound, upperBound, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestCCLFFile provides a mock function with given fields: ctx, cmsID, cclfNum, importStatus, lowerBound, upperBound, fileType
func (_m *MockRepository) GetLatestCCLFFile(ctx context.Context, cmsID string, cclfNum int, importStatus string, lowerBound time.Time, upperBound time.Time, fileType CCLFFileType) (*CCLFFile, error) {
	ret := _m.Called(ctx, cmsID, cclfNum, importStatus, lowerBound, upperBound, fileType)

	var r0 *CCLFFile
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string, time.Time, time.Time, CCLFFileType) *CCLFFile); ok {
		r0 = rf(ctx, cmsID, cclfNum, importStatus, lowerBound, upperBound, fileType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CCLFFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, string, time.Time, time.Time, CCLFFileType) error); ok {
		r1 = rf(ctx, cmsID, cclfNum, importStatus, lowerBound, upperBound, fileType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuppressedMBIs provides a mock function with given fields: ctx, lookbackDays, upperBound
func (_m *MockRepository) GetSuppressedMBIs(ctx context.Context, lookbackDays int, upperBound time.Time) ([]string, error) {
	ret := _m.Called(ctx, lookbackDays, upperBound)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time) []string); ok {
		r0 = rf(ctx, lookbackDays, upperBound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, time.Time) error); ok {
		r1 = rf(ctx, lookbackDays, upperBound)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateACO provides a mock function with given fields: ctx, acoUUID, fieldsAndValues
func (_m *MockRepository) UpdateACO(ctx context.Context, acoUUID uuid.UUID, fieldsAndValues map[string]interface{}) error {
	ret := _m.Called(ctx, acoUUID, fieldsAndValues)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]interface{}) error); ok {
		r0 = rf(ctx, acoUUID, fieldsAndValues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCCLFFileImportStatus provides a mock function with given fields: ctx, fileID, importStatus
func (_m *MockRepository) UpdateCCLFFileImportStatus(ctx context.Context, fileID uint, importStatus string) error {
	ret := _m.Called(ctx, fileID, importStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, fileID, importStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJob provides a mock function with given fields: ctx, j
func (_m *MockRepository) UpdateJob(ctx context.Context, j Job) error {
	ret := _m.Called(ctx, j)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Job) error); ok {
		r0 = rf(ctx, j)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSuppressionFileImportStatus provides a mock function with given fields: ctx, fileID, importStatus
func (_m *MockRepository) UpdateSuppressionFileImportStatus(ctx context.Context, fileID uint, importStatus string) error {
	ret := _m.Called(ctx, fileID, importStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, fileID, importStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
