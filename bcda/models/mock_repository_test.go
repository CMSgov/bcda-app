// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package models

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/pborman/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: ctx, j
func (_m *MockRepository) CreateJob(ctx context.Context, j Job) (uint, error) {
	ret := _m.Called(ctx, j)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, Job) uint); ok {
		r0 = rf(ctx, j)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Job) error); ok {
		r1 = rf(ctx, j)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobKeys provides a mock function with given fields: ctx, jobKeys
func (_m *MockRepository) CreateJobKeys(ctx context.Context, jobKeys ...JobKey) error {
	_va := make([]interface{}, len(jobKeys))
	for _i := range jobKeys {
		_va[_i] = jobKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...JobKey) error); ok {
		r0 = rf(ctx, jobKeys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCCLFBeneficiaries provides a mock function with given fields: ctx, cclfFileID, ignoredMBIs
func (_m *MockRepository) GetCCLFBeneficiaries(ctx context.Context, cclfFileID uint, ignoredMBIs []string) ([]*CCLFBeneficiary, error) {
	ret := _m.Called(ctx, cclfFileID, ignoredMBIs)

	var r0 []*CCLFBeneficiary
	if rf, ok := ret.Get(0).(func(context.Context, uint, []string) []*CCLFBeneficiary); ok {
		r0 = rf(ctx, cclfFileID, ignoredMBIs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*CCLFBeneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, []string) error); ok {
		r1 = rf(ctx, cclfFileID, ignoredMBIs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCLFBeneficiaryMBIs provides a mock function with given fields: ctx, cclfFileID
func (_m *MockRepository) GetCCLFBeneficiaryMBIs(ctx context.Context, cclfFileID uint) ([]string, error) {
	ret := _m.Called(ctx, cclfFileID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, uint) []string); ok {
		r0 = rf(ctx, cclfFileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, cclfFileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobByID provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) GetJobByID(ctx context.Context, jobID uint) (*Job, error) {
	ret := _m.Called(ctx, jobID)

	var r0 *Job
	if rf, ok := ret.Get(0).(func(context.Context, uint) *Job); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobKeys provides a mock function with given fields: ctx, jobID
func (_m *MockRepository) GetJobKeys(ctx context.Context, jobID uint) ([]*JobKey, error) {
	ret := _m.Called(ctx, jobID)

	var r0 []*JobKey
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*JobKey); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*JobKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobs provides a mock function with given fields: ctx, acoID, statuses
func (_m *MockRepository) GetJobs(ctx context.Context, acoID uuid.UUID, statuses ...JobStatus) ([]*Job, error) {
	_va := make([]interface{}, len(statuses))
	for _i := range statuses {
		_va[_i] = statuses[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, acoID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*Job
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...JobStatus) []*Job); ok {
		r0 = rf(ctx, acoID, statuses...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...JobStatus) error); ok {
		r1 = rf(ctx, acoID, statuses...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestCCLFFile provides a mock function with given fields: ctx, cmsID, cclfNum, importStatus, lowerBound, upperBound, fileType
func (_m *MockRepository) GetLatestCCLFFile(ctx context.Context, cmsID string, cclfNum int, importStatus string, lowerBound time.Time, upperBound time.Time, fileType CCLFFileType) (*CCLFFile, error) {
	ret := _m.Called(ctx, cmsID, cclfNum, importStatus, lowerBound, upperBound, fileType)

	var r0 *CCLFFile
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string, time.Time, time.Time, CCLFFileType) *CCLFFile); ok {
		r0 = rf(ctx, cmsID, cclfNum, importStatus, lowerBound, upperBound, fileType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CCLFFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, string, time.Time, time.Time, CCLFFileType) error); ok {
		r1 = rf(ctx, cmsID, cclfNum, importStatus, lowerBound, upperBound, fileType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuppressedMBIs provides a mock function with given fields: ctx, lookbackDays
func (_m *MockRepository) GetSuppressedMBIs(ctx context.Context, lookbackDays int) ([]string, error) {
	ret := _m.Called(ctx, lookbackDays)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, int) []string); ok {
		r0 = rf(ctx, lookbackDays)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, lookbackDays)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJob provides a mock function with given fields: ctx, j
func (_m *MockRepository) UpdateJob(ctx context.Context, j Job) error {
	ret := _m.Called(ctx, j)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Job) error); ok {
		r0 = rf(ctx, j)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
