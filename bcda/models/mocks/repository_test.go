// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Suffixed with _test to avoid placing test code in main path.

package mocks

import (
	models "github.com/CMSgov/bcda-app/bcda/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetCCLFBeneficiaries provides a mock function with given fields: beneIDs, ignoredMBIs
func (_m *Repository) GetCCLFBeneficiaries(beneIDs []int64, ignoredMBIs []string) ([]*models.CCLFBeneficiary, error) {
	ret := _m.Called(beneIDs, ignoredMBIs)

	var r0 []*models.CCLFBeneficiary
	if rf, ok := ret.Get(0).(func([]int64, []string) []*models.CCLFBeneficiary); ok {
		r0 = rf(beneIDs, ignoredMBIs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.CCLFBeneficiary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int64, []string) error); ok {
		r1 = rf(beneIDs, ignoredMBIs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCLFBeneficiaryIds provides a mock function with given fields: cclfFileID
func (_m *Repository) GetCCLFBeneficiaryIds(cclfFileID uint) ([]int64, error) {
	ret := _m.Called(cclfFileID)

	var r0 []int64
	if rf, ok := ret.Get(0).(func(uint) []int64); ok {
		r0 = rf(cclfFileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(cclfFileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCLFBeneficiaryMBIs provides a mock function with given fields: cclfFileID
func (_m *Repository) GetCCLFBeneficiaryMBIs(cclfFileID uint) ([]string, error) {
	ret := _m.Called(cclfFileID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(uint) []string); ok {
		r0 = rf(cclfFileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(cclfFileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestCCLFFile provides a mock function with given fields: cmsID, cclfNum, importStatus, lowerBound, upperBound
func (_m *Repository) GetLatestCCLFFile(cmsID string, cclfNum int, importStatus string, lowerBound time.Time, upperBound time.Time) (*models.CCLFFile, error) {
	ret := _m.Called(cmsID, cclfNum, importStatus, lowerBound, upperBound)

	var r0 *models.CCLFFile
	if rf, ok := ret.Get(0).(func(string, int, string, time.Time, time.Time) *models.CCLFFile); ok {
		r0 = rf(cmsID, cclfNum, importStatus, lowerBound, upperBound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CCLFFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, string, time.Time, time.Time) error); ok {
		r1 = rf(cmsID, cclfNum, importStatus, lowerBound, upperBound)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuppressedMBIs provides a mock function with given fields: lookbackDays
func (_m *Repository) GetSuppressedMBIs(lookbackDays int) ([]string, error) {
	ret := _m.Called(lookbackDays)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(lookbackDays)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(lookbackDays)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
