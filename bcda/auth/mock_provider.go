// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package auth

import (
	jwt "github.com/dgrijalva/jwt-go"
	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// AuthorizeAccess provides a mock function with given fields: tokenString
func (_m *MockProvider) AuthorizeAccess(tokenString string) error {
	ret := _m.Called(tokenString)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSystem provides a mock function with given fields: clientID
func (_m *MockProvider) DeleteSystem(clientID string) error {
	ret := _m.Called(clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *MockProvider) GetVersion() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeAccessToken provides a mock function with given fields: credentials
func (_m *MockProvider) MakeAccessToken(credentials Credentials) (string, error) {
	ret := _m.Called(credentials)

	var r0 string
	if rf, ok := ret.Get(0).(func(Credentials) string); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Credentials) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSystem provides a mock function with given fields: localID, publicKey, groupID, ips
func (_m *MockProvider) RegisterSystem(localID string, publicKey string, groupID string, ips ...string) (Credentials, error) {
	_va := make([]interface{}, len(ips))
	for _i := range ips {
		_va[_i] = ips[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, localID, publicKey, groupID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Credentials
	if rf, ok := ret.Get(0).(func(string, string, string, ...string) Credentials); ok {
		r0 = rf(localID, publicKey, groupID, ips...)
	} else {
		r0 = ret.Get(0).(Credentials)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, ...string) error); ok {
		r1 = rf(localID, publicKey, groupID, ips...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetSecret provides a mock function with given fields: clientID
func (_m *MockProvider) ResetSecret(clientID string) (Credentials, error) {
	ret := _m.Called(clientID)

	var r0 Credentials
	if rf, ok := ret.Get(0).(func(string) Credentials); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Get(0).(Credentials)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeAccessToken provides a mock function with given fields: tokenString
func (_m *MockProvider) RevokeAccessToken(tokenString string) error {
	ret := _m.Called(tokenString)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeSystemCredentials provides a mock function with given fields: clientID
func (_m *MockProvider) RevokeSystemCredentials(clientID string) error {
	ret := _m.Called(clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSystem provides a mock function with given fields: params
func (_m *MockProvider) UpdateSystem(params []byte) ([]byte, error) {
	ret := _m.Called(params)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: tokenString
func (_m *MockProvider) VerifyToken(tokenString string) (*jwt.Token, error) {
	ret := _m.Called(tokenString)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
