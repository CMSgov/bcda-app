// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// NoteType is documented here http://hl7.org/fhir/ValueSet/note-type
type NoteType int

const (
	NoteTypeDisplay NoteType = iota
	NoteTypePrint
	NoteTypePrintoper
)

func (code NoteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *NoteType) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "display":
		*code = NoteTypeDisplay
	case "print":
		*code = NoteTypePrint
	case "printoper":
		*code = NoteTypePrintoper
	default:
		return fmt.Errorf("unknown NoteType code `%s`", s)
	}
	return nil
}
func (code NoteType) String() string {
	return code.Code()
}
func (code NoteType) Code() string {
	switch code {
	case NoteTypeDisplay:
		return "display"
	case NoteTypePrint:
		return "print"
	case NoteTypePrintoper:
		return "printoper"
	}
	return "<unknown>"
}
func (code NoteType) Display() string {
	switch code {
	case NoteTypeDisplay:
		return "Display"
	case NoteTypePrint:
		return "Print (Form)"
	case NoteTypePrintoper:
		return "Print (Operator)"
	}
	return "<unknown>"
}
func (code NoteType) Definition() string {
	switch code {
	case NoteTypeDisplay:
		return "Display the note."
	case NoteTypePrint:
		return "Print the note on the form."
	case NoteTypePrintoper:
		return "Print the note for the operator."
	}
	return "<unknown>"
}
