// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// GuidePageGeneration is documented here http://hl7.org/fhir/ValueSet/guide-page-generation
type GuidePageGeneration int

const (
	GuidePageGenerationHtml GuidePageGeneration = iota
	GuidePageGenerationMarkdown
	GuidePageGenerationXml
	GuidePageGenerationGenerated
)

func (code GuidePageGeneration) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *GuidePageGeneration) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "html":
		*code = GuidePageGenerationHtml
	case "markdown":
		*code = GuidePageGenerationMarkdown
	case "xml":
		*code = GuidePageGenerationXml
	case "generated":
		*code = GuidePageGenerationGenerated
	default:
		return fmt.Errorf("unknown GuidePageGeneration code `%s`", s)
	}
	return nil
}
func (code GuidePageGeneration) String() string {
	return code.Code()
}
func (code GuidePageGeneration) Code() string {
	switch code {
	case GuidePageGenerationHtml:
		return "html"
	case GuidePageGenerationMarkdown:
		return "markdown"
	case GuidePageGenerationXml:
		return "xml"
	case GuidePageGenerationGenerated:
		return "generated"
	}
	return "<unknown>"
}
func (code GuidePageGeneration) Display() string {
	switch code {
	case GuidePageGenerationHtml:
		return "HTML"
	case GuidePageGenerationMarkdown:
		return "Markdown"
	case GuidePageGenerationXml:
		return "XML"
	case GuidePageGenerationGenerated:
		return "Generated"
	}
	return "<unknown>"
}
func (code GuidePageGeneration) Definition() string {
	switch code {
	case GuidePageGenerationHtml:
		return "Page is proper xhtml with no templating.  Will be brought across unchanged for standard post-processing."
	case GuidePageGenerationMarkdown:
		return "Page is markdown with templating.  Will use the template to create a file that imports the markdown file prior to post-processing."
	case GuidePageGenerationXml:
		return "Page is xml with templating.  Will use the template to create a file that imports the source file and run the nominated XSLT transform (see parameters) if present prior to post-processing."
	case GuidePageGenerationGenerated:
		return "Page will be generated by the publication process - no source to bring across."
	}
	return "<unknown>"
}
